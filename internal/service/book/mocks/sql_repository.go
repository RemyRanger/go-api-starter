// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/cdv-projects/go-apis/internal/services/flows (interfaces: SQL)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/cdv-projects/go-apis/internal/common/entities"
	models "gitlab.com/cdv-projects/go-apis/internal/common/models"
)

// MockSQL is a mock of SQL interface.
type MockSQL struct {
	ctrl     *gomock.Controller
	recorder *MockSQLMockRecorder
}

// MockSQLMockRecorder is the mock recorder for MockSQL.
type MockSQLMockRecorder struct {
	mock *MockSQL
}

// NewMockSQL creates a new mock instance.
func NewMockSQL(ctrl *gomock.Controller) *MockSQL {
	mock := &MockSQL{ctrl: ctrl}
	mock.recorder = &MockSQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQL) EXPECT() *MockSQLMockRecorder {
	return m.recorder
}

// CreateFlow mocks base method.
func (m *MockSQL) CreateFlow(arg0 context.Context, arg1 *models.Flow) (*models.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", arg0, arg1)
	ret0, _ := ret[0].(*models.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow.
func (mr *MockSQLMockRecorder) CreateFlow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockSQL)(nil).CreateFlow), arg0, arg1)
}

// FindContactsByFlowID mocks base method.
func (m *MockSQL) FindContactsByFlowID(arg0 context.Context, arg1 string, arg2 *entities.Query) ([]*models.Contact, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindContactsByFlowID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Contact)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindContactsByFlowID indicates an expected call of FindContactsByFlowID.
func (mr *MockSQLMockRecorder) FindContactsByFlowID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindContactsByFlowID", reflect.TypeOf((*MockSQL)(nil).FindContactsByFlowID), arg0, arg1, arg2)
}

// FindFlows mocks base method.
func (m *MockSQL) FindFlows(arg0 context.Context, arg1 *entities.Query) ([]*models.Flow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlows", arg0, arg1)
	ret0, _ := ret[0].([]*models.Flow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindFlows indicates an expected call of FindFlows.
func (mr *MockSQLMockRecorder) FindFlows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlows", reflect.TypeOf((*MockSQL)(nil).FindFlows), arg0, arg1)
}

// FindFlowsOrigins mocks base method.
func (m *MockSQL) FindFlowsOrigins(arg0 context.Context, arg1 *entities.QueryFlowsOrigins) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlowsOrigins", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlowsOrigins indicates an expected call of FindFlowsOrigins.
func (mr *MockSQLMockRecorder) FindFlowsOrigins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlowsOrigins", reflect.TypeOf((*MockSQL)(nil).FindFlowsOrigins), arg0, arg1)
}

// FindFlowsStatistics mocks base method.
func (m *MockSQL) FindFlowsStatistics(arg0 context.Context) (*models.FlowsStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlowsStatistics", arg0)
	ret0, _ := ret[0].(*models.FlowsStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlowsStatistics indicates an expected call of FindFlowsStatistics.
func (mr *MockSQLMockRecorder) FindFlowsStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlowsStatistics", reflect.TypeOf((*MockSQL)(nil).FindFlowsStatistics), arg0)
}

// FindJobsByFlowJobName mocks base method.
func (m *MockSQL) FindJobsByFlowJobName(arg0 context.Context, arg1 string, arg2 *entities.Query) ([]*models.TalendFlowsStatistics, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJobsByFlowJobName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.TalendFlowsStatistics)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindJobsByFlowJobName indicates an expected call of FindJobsByFlowJobName.
func (mr *MockSQLMockRecorder) FindJobsByFlowJobName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobsByFlowJobName", reflect.TypeOf((*MockSQL)(nil).FindJobsByFlowJobName), arg0, arg1, arg2)
}

// GetFlow mocks base method.
func (m *MockSQL) GetFlow(arg0 context.Context, arg1 string) (*models.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlow", arg0, arg1)
	ret0, _ := ret[0].(*models.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlow indicates an expected call of GetFlow.
func (mr *MockSQLMockRecorder) GetFlow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlow", reflect.TypeOf((*MockSQL)(nil).GetFlow), arg0, arg1)
}

// UpdateFlow mocks base method.
func (m *MockSQL) UpdateFlow(arg0 context.Context, arg1 *models.Flow, arg2 string) (*models.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlow indicates an expected call of UpdateFlow.
func (mr *MockSQLMockRecorder) UpdateFlow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockSQL)(nil).UpdateFlow), arg0, arg1, arg2)
}

// UpdateFlowStatus mocks base method.
func (m *MockSQL) UpdateFlowStatus(arg0 context.Context, arg1 bool, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFlowStatus indicates an expected call of UpdateFlowStatus.
func (mr *MockSQLMockRecorder) UpdateFlowStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowStatus", reflect.TypeOf((*MockSQL)(nil).UpdateFlowStatus), arg0, arg1, arg2, arg3)
}
