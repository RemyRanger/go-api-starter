{"openapi":"3.0.3","info":{"title":"Entitlement API","version":"1.0","description":"Entitlement API\n\nWe use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.\n\n# Authentication\n\nAuth is provided by OAuth2.\n\n<!-- ReDoc-Inject: <security-definitions> -->","contact":{"name":"Dawex","email":"developer@dawex.com"},"license":{"name":"Dawex","url":"https://www.dawex.com/"}},"servers":[{"url":"https://api.{hostname}","variables":{"hostname":{"default":"example.com","description":"The URI hostname of the Data Exchange Platform API"}}}],"security":[{"OAuth2":[]}],"paths":{"/orchestrator/deps":{"get":{"tags":["Connected Dep"],"summary":"Get all connected DEPs","description":"Retrieves all the connected DEPs to this Data Exchange Platform.","operationId":"get-all-connected-deps","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ConnectedDep"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create connected DEP","description":"Creates a new connected DEP to this Data Exchange Platform.","operationId":"create-connected-dep","requestBody":{"description":"The connected DEP to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'string', descriptions: {property1: 'string', property2: 'string'}}));\nreq.end();"}]}},"/orchestrator/deps/{depId}":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get connected DEP","description":"Retrieves the connected DEP with the specified ID.","operationId":"get-connected-dep","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch connected DEP","description":"Updates only the specified properties of connected DEP.","operationId":"patch-connected-dep","requestBody":{"description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  descriptions: {property1: 'string', property2: 'string'},\n  remoteServiceAccount: {\n    apiEndpoint: 'string',\n    credentials: [{clientId: 'string', clientSecret: 'string', rotationRole: 'PRIMARY'}]\n  }\n}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete connected DEP","description":"Deletes the specified connected DEP.","operationId":"delete-connected-dep","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get all service accounts","description":"Retrieves all the service accounts belonging to this DEP.","operationId":"get-all-dep-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DepServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create service account","description":"Creates a new service account for this DEP.","operationId":"create-dep-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account","description":"Retrieves the service account with the specified ID.","operationId":"get-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch service account","description":"Updates only the specified properties of service account.","operationId":"patch-dep-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete service account","description":"Deletes the specified service account.","operationId":"delete-dep-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Activate service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Deactivate service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Connected Dep"],"summary":"Regenerate client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-dep-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts":{"get":{"tags":["Orchestration Service Account"],"summary":"Get all orchestration service accounts","description":"Retrieves all the service accounts used for orchestration of the Data Exchange Platform.","operationId":"get-all-orchestration-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestration Service Account"],"summary":"Create orchestration service account","description":"Creates a new service account that can be used for orchestrating the Data Exchange Platform.","operationId":"create-orchestration-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account","description":"Retrieves the service account with the specified ID.","operationId":"get-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Orchestration Service Account"],"summary":"Patch orchestration service account","description":"Updates only the specified properties of service account.","operationId":"patch-orchestration-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Orchestration Service Account"],"summary":"Delete orchestration service account","description":"Deletes the specified service account.","operationId":"delete-orchestration-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Activate orchestration service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Deactivate orchestration service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Orchestration Service Account"],"summary":"Regenerate orchestration service account client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-orchestration-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissions":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator permissions","description":"Retrieves all the permissions available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissionNavigation":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get navigation hierarchy for orchestrator permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-orchestrator-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roles":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator roles","description":"Retrieves all the roles available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role","description":"Creates a new role available to orchestrators of the Data Exchange Platform.","operationId":"create-orchestrator-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['ORCHESTRATOR']\n}));\nreq.end();"}]}},"/orchestrator/authorization/roles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role","description":"Retrieves the orchestrator role with the specified key.","operationId":"get-orchestrator-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Orchestrator Authorization Management"],"summary":"Update orchestrator role","description":"Updates the orchestrator role with the specified key.","operationId":"update-orchestrator-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role","description":"Delete an orchestrator role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-orchestrator-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments":{"get":{"tags":["Orchestrator Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get orchestrator role assignments","description":"Retrieves all role assignments for orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role assignment","description":"Assigns an orchestrator role to a subject.","operationId":"create-orchestrator-role-assignment","requestBody":{"description":"Specifies the role and the subject to which it is being assigned.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"303":{"$ref":"#/components/responses/303-see-other-role-assignment"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role assignment","description":"Gets the orchestrator role assignment with the specified ID.","operationId":"get-orchestrator-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role assignment","description":"Un-assigns an orchestrator role from a subject.","operationId":"delete-orchestrator-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles":{"get":{"tags":["Organisation Authorization Management"],"summary":"List organisation global roles","description":"Retrieves all the roles globally available to all organisations on the Data Exchange Platform.","operationId":"list-organisation-global-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create organisation global role","description":"Creates a new role globally available to all organisations of the Data Exchange Platform.","operationId":"create-organisation-global-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['USER']\n}));\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisation global role","description":"Retrieves the organisation global role with the specified key.","operationId":"get-organisation-global-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Organisation Authorization Management"],"summary":"Update organisation global role","description":"Updates the organisation global role with the specified key.","operationId":"update-organisation-global-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete organisation global role","description":"Delete an organisation global role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-organisation-global-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groups":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization groups in organisation","description":"Retrieves all the authorization groups available in an organisation","operationId":"list-organisation-groups","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/memberIdFilter"},{"$ref":"#/components/parameters/groupKeyFilter"}],"summary":"List authorization group memberships in organisation","description":"Retrieves all authorization group memberships in an organisation.","operationId":"list-organisation-group-memberships","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'memberId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'groupKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create authorization group membership in organisation","description":"Creates an authorization group membership in an organisation. The new group member must belong to that same organisation.","operationId":"create-organisation-group-membership","requestBody":{"description":"The group membership to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"303":{"$ref":"#/components/responses/303-see-other-group-membership"},"403":{"$ref":"#/components/responses/403-default"},"422":{"description":"Unprocessable Content | - The group indicated by 'groupId' does not exist | -or- The object indicated by 'memberId' does not exist | -or- The group does not allow members of this type"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\"\n\n\tpayload := strings.NewReader(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({memberId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', groupKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships/{groupMembershipId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/groupMembershipId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization group membership in organisation","description":"Retrieves the group membership with the specified ID.","operationId":"get-organisation-group-membership","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete authorization group membership","description":"Deletes the group membership with the specified ID.","operationId":"delete-organisation-group-membership","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roles":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get roles","description":"Retrieves all the roles available in an organisation.","operationId":"list-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get roles assignment for a participant attached to an organization","description":"Retrieves all authorization role assignments in an organisation.","operationId":"list-participant-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create role assignment in organisation","description":"Creates a role assignment in an organisation. The subject of the assignment must be a participant belonging to that same organisation.","operationId":"create-organisation-role-assignment","requestBody":{"description":"The role assignment to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get role assignment","description":"Retrieves the role assignment with the specified ID.","operationId":"get-organisation-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete role assignment","description":"Deletes a role assignment in an organisation. The subject of that assignment will no longer be assigned that role in that organisation.","operationId":"delete-organisation-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissions":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisations permissions","description":"Retrieves all the permissions available to organisations of the Data Exchange Platform.","operationId":"list-organisation-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissionNavigation":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get navigation hierarchy for organisations permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-organisation-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"securitySchemes":{"OAuth2":{"type":"oauth2","flows":{"clientCredentials":{"tokenUrl":"/api/auth/oauth2/token","scopes":{}}}}},"schemas":{"ObjectWithId":{"type":"object","description":"Partial schema for any object that has a property called 'id' that represents its unique ID","required":["id"],"properties":{"id":{"type":"string","description":"The unique ID of this object.","readOnly":true}}},"ConnectedDepDescriptions":{"type":"object","description":"Representing all descriptions associated to a connected DEP. Each description is referenced by the corresponding language iso code.","additionalProperties":{"type":"string"}},"ConnectedDepProperties":{"type":"object","description":"The mutable properties of a connected DEP.","properties":{"name":{"type":"string","description":"A human readable connected DEP name and allows a minimum of connector characters. Requires a minimum length of 1 character and allows a maximum length of 80 characters.","minLength":1,"maxLength":80},"descriptions":{"$ref":"#/components/schemas/ConnectedDepDescriptions"}}},"ConnectedDepReadOnlyProperties":{"type":"object","description":"The immutable properties of a connected DEP.","properties":{"createdAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was created"},"lastModifiedAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was last modified"}}},"RotationRole":{"type":"string","enum":["PRIMARY","SECONDARY"]},"RemoteServiceAccountCredentials":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}},"required":["clientId","clientSecret","rotationRole"]},"RemoteServiceAccount":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"apiEndpoint":{"type":"string","description":"API endpoint of the remote connected DEP"},"credentials":{"description":"List of credentials to access to the remote connected DEP","type":"array","items":{"$ref":"#/components/schemas/RemoteServiceAccountCredentials"}}},"required":["credentials"]},"ConnectedDep":{"type":"object","description":"Represents another Data Exchange Platform connected to this Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ConnectedDepProperties"},{"$ref":"#/components/schemas/ConnectedDepReadOnlyProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}],"required":["id","name","createdAt","lastModifiedAt","remoteServiceAccount"]},"ConnectedDepCreateRequest":{"type":"object","description":"Request used to create a new connected DEP.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"}],"required":["name"]},"Id":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"ConnectedDepPatch":{"type":"object","description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}]},"ObjectAssociatedWithAnotherDep":{"type":"object","description":"Partial schema for any object that is associated with or owned by another Data Exchange Platform","required":["depId"],"properties":{"depId":{"type":"string","description":"The ID of the Data Exchange Platform that owns this object.","readOnly":true}}},"HumanReadableObjectName":{"type":"string","description":"A human readable object name that starts with a letter and allows a minimum of connector characters.\nRequires a minimum length of 2 characters and allows a maximum length of 100 characters.\n","minLength":2,"maxLength":100,"pattern":"^(?:\\p{L}[\\p{L}\\p{Mn}\\p{Nd}\\u2019\\-._,' \\(\\)]{1,99})$","example":"Sample name"},"ServiceAccountProperties":{"type":"object","description":"The properties of a service account.","properties":{"name":{"description":"The name of the service account.","$ref":"#/components/schemas/HumanReadableObjectName"},"description":{"type":"string","description":"A short description of this service account.","maxLength":500}}},"ServiceAccountReadOnlyProperties":{"type":"object","description":"The properties of a service account.","properties":{"active":{"type":"boolean","description":"Indicates whether the service account is active.","readOnly":true}}},"BasicAuditInfo":{"type":"object","description":"Encapsulates basic audit information about this resource","properties":{"createdAtUtc":{"type":"string","format":"date-time","description":"(Optional) The UTC time when this resource was created, if known.","readOnly":true},"createdById":{"type":"string","description":"(Optional) The identifier of the actor who created this resource, if known.","readOnly":true},"lastModifiedAtUtc":{"type":"string","format":"date-time","description":"(Optional) The time in UTC when this resource was last modified, if known.","readOnly":true},"lastModifiedById":{"type":"string","description":"(Optional) The identifier of the actor who last modified this resource, if known.","readOnly":true}}},"DepServiceAccount":{"type":"object","description":"A service account that may be allowed to access this Data Exchange Platform on behalf of another Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectAssociatedWithAnotherDep"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","depId","name","active"]},"ServiceAccountPatch":{"type":"object","description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ServiceAccountProperties"}]},"OAuth2ClientCredentials":{"type":"object","description":"Credentials to use with the OAuth2 client_credentials grant. Includes the client_id, but not the client_secret.\nThe client_secret can be obtained separately.\n","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"lastRotatedUtc":{"type":"string","format":"date-time","description":"The time in UTC that the client_secret was last rotates."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}}},"OAuth2ClientSecret":{"type":"object","description":"The client_secret tu use with the OAuth2 client_credentials grant.\n","properties":{"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."}}},"OrchestrationServiceAccount":{"type":"object","description":"A service account that may be allowed to perform operations on the Data Exchange Platform on behalf of an organisation.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","name","active"]},"ObjectWithKey":{"type":"object","description":"Partial schema for any object that has a property called 'key' that represents its unique key within a given scope","properties":{"key":{"type":"string","description":"The unique KEY of this object in a known scope.","readOnly":true}}},"SecurityTier":{"type":"integer","description":"The security tier to which a permission, role or group belongs. The lower the number, the more critical the security tier. An role cannot contain a permission with a more critical security tier than its own. An group cannot be assigned a role with a more critical security tier than its own.","minimum":0,"maximum":2},"ObjectWithSecurityTier":{"type":"object","description":"Partial schema for any object that has a property called 'securityTier' that represents its security tier","properties":{"securityTier":{"$ref":"#/components/schemas/SecurityTier"}}},"Permission":{"type":"object","description":"A permission on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectWithSecurityTier"}],"required":["key","securityTier"]},"PermissionListResult":{"type":"object","description":"Encapsulates a list permissions in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"required":["items"]},"PermissionNavigationNode":{"type":"object","description":"May contain a logical grouping of permissions and other child nodes.","properties":{"key":{"description":"The key or label of this node","type":"string"},"children":{"description":"Child nodes in the navigation hierarchy","type":"array","items":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"permissionKeys":{"description":"The keys of the permission at this node of the navigation hierarchy","type":"array","items":{"type":"string"}}}},"PermissionNavigationTree":{"type":"object","description":"Represents a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nin which each node may or may not contain permissions and the same permission may be contained by multiple nodes.\n","properties":{"root":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"required":["root"]},"Key":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"RoleProperties":{"type":"object","description":"The properties of a role on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"minimumAssignmentCount":{"type":"integer","description":"A minimum number of subjects to which this role must be assigned at any given time. | Use this mechanism to guarantee a level of redundancy in the assignment of mission-critical roles. | Note that whether the subject of a role assignment is active or inactive/deactivated | is transparent. Role assignments are NOT deleted automatically when their subject is deactivated, | contrary to when their subject is deleted."},"description":{"type":"string","maxLength":500,"description":"The description of the role."},"builtInRole":{"type":"boolean","description":"Indicates whether the role is built-into the Data Exchange Platform, or otherwise is a custom role."},"assignableSubjectTypes":{"type":"array","description":"The types of subjects to which it is allowed to assign this role.","items":{"type":"string"}},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}}}]},"OrchestratorRole":{"type":"object","description":"An orchestrator role on the Data Exchange Platform that can be assigned to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","permissions","assignableSubjectTypes","securityTier","builtInRole","readOnly"]},"OrchestratorRoleListResult":{"type":"object","description":"Encapsulates a list of orchestrator role objects in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRole"}}},"required":["items"]},"RoleCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role.","properties":{"key":{"description":"The unique key by which the new role will be referenced if successfully created. (Optional) If none is provided, the server will generate one.","$ref":"#/components/schemas/Key"},"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"securityTier":{"description":"The security tier of this role.","$ref":"#/components/schemas/SecurityTier"},"description":{"type":"string","maxLength":500,"description":"The description of the role. (Optional)"},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}},"required":["name","securityTier"]},"OrchestrationSubjectType":{"type":"string","enum":["ORCHESTRATOR","SERVICE_ACCOUNT","GROUP"]},"OrchestratorRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"RoleAssignmentProperties":{"type":"object","description":"The properties of a role assignment on the Data Exchange Platform.","properties":{"subjectId":{"description":"The ID of the subject to which the role is assigned","$ref":"#/components/schemas/Id"},"roleKey":{"description":"The unique key of the role assigned.","$ref":"#/components/schemas/Key"}}},"OrchestratorRoleAssignment":{"type":"object","description":"Represents the assignment of an orchestrator role to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","subjectId","roleKey"]},"OrchestratorRoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of orchestrator role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["subjectId","roleKey"]},"OrchestratorRoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]},"OrganisationGlobalRole":{"type":"object","description":"A role that is available to all organisations on the Data Exchange Platform |\nand can be assigned to subjects in any of those organisations |\nbut which is not owned by any singular organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","assignableSubjectTypes","permissions","securityTier","readOnly"]},"OrganisationGlobalRoleListResult":{"type":"object","description":"Encapsulates a list of organisation global roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}},"required":["items"]},"OrganisationSubjectType":{"type":"string","enum":["USER","SERVICE_ACCOUNT","GROUP"]},"OrganisationGlobalRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new organisation global role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"ObjectBelongingToOrganisation":{"type":"object","description":"Partial schema for any object that is associated with or owned by an organisation on the Data Exchange Platform","required":["organisationId"],"properties":{"organisationId":{"type":"string","description":"The ID of the organisation that owns this object.","readOnly":true}}},"GroupProperties":{"type":"object","description":"The properties of an authorization group of any kind on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"type":"string","description":"The name of the authorization group."},"description":{"type":"string","maxLength":500,"description":"The description of the authorization group."},"builtInGroup":{"type":"boolean","description":"Indicates whether the group is built-in on the Data Exchange Platform, or otherwise is a custom group."},"allowedMemberTypes":{"type":"array","description":"The types of subjects which are allowed to become members of the authorization group.","items":{"type":"string"}}}}]},"Group":{"type":"object","description":"An authorization group belonging to an organisation on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupProperties"}],"required":["key","organisationId","name","securityTier","allowedMemberTypes","builtInGroup"]},"GroupListResult":{"type":"object","description":"Encapsulates a list of authorization groups in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}},"required":["items"]},"GroupMembershipProperties":{"type":"object","description":"Properties of a membership in an authorization group of any kind on the Data Exchange Platform.","properties":{"memberId":{"description":"The ID of the subject which is made a member of a group via this membership.","$ref":"#/components/schemas/Id"},"groupKey":{"description":"The unique key of the group in which the subject is made a member.","$ref":"#/components/schemas/Key"}}},"GroupMembership":{"type":"object","description":"A membership of a subject in authorization group belonging to an organisation on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["id","organisationId","memberId","groupKey"]},"GroupMembershipListResult":{"type":"object","description":"Encapsulates a list of authorization group memberships in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/GroupMembership"}}},"required":["items"]},"GroupMembershipCreateRequestProperties":{"type":"object","description":"Properties necessary to create an authorization group membership of any kind.","allOf":[{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["memberId","groupKey"]},"GroupMembershipCreateRequest":{"type":"object","description":"The properties necessary to create an authorization group membership in an organisation.","allOf":[{"$ref":"#/components/schemas/GroupMembershipCreateRequestProperties"}],"required":["memberId","groupKey"]},"Role":{"type":"object","description":"A role that can be assigned to a subject in order to |\ngrant that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleProperties"}],"required":["organisationId","key","name","assignableSubjectTypes","permissions","securityTier","builtInRole"]},"RoleListResult":{"type":"object","description":"Encapsulates a list of roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}},"required":["items"]},"RoleAssignment":{"type":"object","description":"Represents the assignment of a role to a subject, |\nthus granting that subject all the permissions associated with the role in the organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","organisationId","subjectId","roleKey"]},"RoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/RoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a role assignment in an organisation.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]}},"responses":{"400-default":{"description":"Bad request. The request is malformed or contains invalid parameters in the body, URL path, URL query string, or HTTP headers.\n"},"401-default":{"description":"Unauthorized. The caller's authentication credentials are invalid or missing.\n"},"403-default":{"description":"Forbidden. The caller is not allowed to perform this operation.\n"},"404-default":{"description":"Not Found. The specified resource was not found.\n"},"200-default":{"description":"OK"},"204-default":{"description":"No content"},"409-default":{"description":"Conflict. An equivalent resource already exists.\n"},"422-default":{"description":"Unprocessable content. The request is well-formed but violates the semantics or business logic of the server.\n"},"303-see-other-role-assignment":{"description":"See Other | The resource was not created. An equivalent assignment for the same subject and role already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent role assignment resource to the one that was POST-ed"}}},"303-see-other-group-membership":{"description":"See Other | An equivalent membership for the same member in the same group already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent authorization group membership resource to the one that was POST-ed"}}}},"parameters":{"depId":{"name":"depId","description":"The ID of a registered Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"serviceAccountId":{"name":"serviceAccountId","description":"The ID of a service account.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"rotationRole":{"name":"rotationRole","description":"Indicates one of the two client credentials for this service.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/RotationRole"}},"roleKey":{"name":"roleKey","description":"The unique key of a role.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Key"}},"authorizationSubjectIdFilter":{"name":"subjectId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is assigned a role for authorization on the Data Exchange Platform."},"roleKeyFilter":{"name":"roleKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of a role on the Data Exchange Platform. Only results satisfying this filter condition should be returned."},"roleAssignmentId":{"name":"roleAssignmentId","description":"The ID of an role assignment.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"organisationId":{"name":"organisationId","description":"The ID of an organisation registered on the Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"memberIdFilter":{"name":"memberId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is a member in a authorization group."},"groupKeyFilter":{"name":"groupKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of an authorization group. Only results satisfying this filter condition should be returned."},"groupMembershipId":{"name":"groupMembershipId","description":"The ID of an authorization group membership.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}}}}}{"openapi":"3.0.3","info":{"title":"Entitlement API","version":"1.0","description":"Entitlement API\n\nWe use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.\n\n# Authentication\n\nAuth is provided by OAuth2.\n\n<!-- ReDoc-Inject: <security-definitions> -->","contact":{"name":"Dawex","email":"developer@dawex.com"},"license":{"name":"Dawex","url":"https://www.dawex.com/"}},"servers":[{"url":"https://api.{hostname}","variables":{"hostname":{"default":"example.com","description":"The URI hostname of the Data Exchange Platform API"}}}],"security":[{"OAuth2":[]}],"paths":{"/orchestrator/deps":{"get":{"tags":["Connected Dep"],"summary":"Get all connected DEPs","description":"Retrieves all the connected DEPs to this Data Exchange Platform.","operationId":"get-all-connected-deps","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ConnectedDep"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create connected DEP","description":"Creates a new connected DEP to this Data Exchange Platform.","operationId":"create-connected-dep","requestBody":{"description":"The connected DEP to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'string', descriptions: {property1: 'string', property2: 'string'}}));\nreq.end();"}]}},"/orchestrator/deps/{depId}":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get connected DEP","description":"Retrieves the connected DEP with the specified ID.","operationId":"get-connected-dep","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch connected DEP","description":"Updates only the specified properties of connected DEP.","operationId":"patch-connected-dep","requestBody":{"description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  descriptions: {property1: 'string', property2: 'string'},\n  remoteServiceAccount: {\n    apiEndpoint: 'string',\n    credentials: [{clientId: 'string', clientSecret: 'string', rotationRole: 'PRIMARY'}]\n  }\n}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete connected DEP","description":"Deletes the specified connected DEP.","operationId":"delete-connected-dep","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get all service accounts","description":"Retrieves all the service accounts belonging to this DEP.","operationId":"get-all-dep-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DepServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create service account","description":"Creates a new service account for this DEP.","operationId":"create-dep-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account","description":"Retrieves the service account with the specified ID.","operationId":"get-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch service account","description":"Updates only the specified properties of service account.","operationId":"patch-dep-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete service account","description":"Deletes the specified service account.","operationId":"delete-dep-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Activate service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Deactivate service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Connected Dep"],"summary":"Regenerate client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-dep-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts":{"get":{"tags":["Orchestration Service Account"],"summary":"Get all orchestration service accounts","description":"Retrieves all the service accounts used for orchestration of the Data Exchange Platform.","operationId":"get-all-orchestration-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestration Service Account"],"summary":"Create orchestration service account","description":"Creates a new service account that can be used for orchestrating the Data Exchange Platform.","operationId":"create-orchestration-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account","description":"Retrieves the service account with the specified ID.","operationId":"get-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Orchestration Service Account"],"summary":"Patch orchestration service account","description":"Updates only the specified properties of service account.","operationId":"patch-orchestration-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Orchestration Service Account"],"summary":"Delete orchestration service account","description":"Deletes the specified service account.","operationId":"delete-orchestration-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Activate orchestration service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Deactivate orchestration service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Orchestration Service Account"],"summary":"Regenerate orchestration service account client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-orchestration-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissions":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator permissions","description":"Retrieves all the permissions available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissionNavigation":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get navigation hierarchy for orchestrator permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-orchestrator-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roles":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator roles","description":"Retrieves all the roles available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role","description":"Creates a new role available to orchestrators of the Data Exchange Platform.","operationId":"create-orchestrator-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['ORCHESTRATOR']\n}));\nreq.end();"}]}},"/orchestrator/authorization/roles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role","description":"Retrieves the orchestrator role with the specified key.","operationId":"get-orchestrator-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Orchestrator Authorization Management"],"summary":"Update orchestrator role","description":"Updates the orchestrator role with the specified key.","operationId":"update-orchestrator-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role","description":"Delete an orchestrator role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-orchestrator-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments":{"get":{"tags":["Orchestrator Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get orchestrator role assignments","description":"Retrieves all role assignments for orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role assignment","description":"Assigns an orchestrator role to a subject.","operationId":"create-orchestrator-role-assignment","requestBody":{"description":"Specifies the role and the subject to which it is being assigned.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"303":{"$ref":"#/components/responses/303-see-other-role-assignment"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role assignment","description":"Gets the orchestrator role assignment with the specified ID.","operationId":"get-orchestrator-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role assignment","description":"Un-assigns an orchestrator role from a subject.","operationId":"delete-orchestrator-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles":{"get":{"tags":["Organisation Authorization Management"],"summary":"List organisation global roles","description":"Retrieves all the roles globally available to all organisations on the Data Exchange Platform.","operationId":"list-organisation-global-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create organisation global role","description":"Creates a new role globally available to all organisations of the Data Exchange Platform.","operationId":"create-organisation-global-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['USER']\n}));\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisation global role","description":"Retrieves the organisation global role with the specified key.","operationId":"get-organisation-global-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Organisation Authorization Management"],"summary":"Update organisation global role","description":"Updates the organisation global role with the specified key.","operationId":"update-organisation-global-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete organisation global role","description":"Delete an organisation global role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-organisation-global-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groups":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization groups in organisation","description":"Retrieves all the authorization groups available in an organisation","operationId":"list-organisation-groups","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/memberIdFilter"},{"$ref":"#/components/parameters/groupKeyFilter"}],"summary":"List authorization group memberships in organisation","description":"Retrieves all authorization group memberships in an organisation.","operationId":"list-organisation-group-memberships","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'memberId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'groupKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create authorization group membership in organisation","description":"Creates an authorization group membership in an organisation. The new group member must belong to that same organisation.","operationId":"create-organisation-group-membership","requestBody":{"description":"The group membership to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"303":{"$ref":"#/components/responses/303-see-other-group-membership"},"403":{"$ref":"#/components/responses/403-default"},"422":{"description":"Unprocessable Content | - The group indicated by 'groupId' does not exist | -or- The object indicated by 'memberId' does not exist | -or- The group does not allow members of this type"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\"\n\n\tpayload := strings.NewReader(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({memberId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', groupKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships/{groupMembershipId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/groupMembershipId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization group membership in organisation","description":"Retrieves the group membership with the specified ID.","operationId":"get-organisation-group-membership","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete authorization group membership","description":"Deletes the group membership with the specified ID.","operationId":"delete-organisation-group-membership","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roles":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get roles","description":"Retrieves all the roles available in an organisation.","operationId":"list-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get roles assignment for a participant attached to an organization","description":"Retrieves all authorization role assignments in an organisation.","operationId":"list-participant-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create role assignment in organisation","description":"Creates a role assignment in an organisation. The subject of the assignment must be a participant belonging to that same organisation.","operationId":"create-organisation-role-assignment","requestBody":{"description":"The role assignment to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get role assignment","description":"Retrieves the role assignment with the specified ID.","operationId":"get-organisation-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete role assignment","description":"Deletes a role assignment in an organisation. The subject of that assignment will no longer be assigned that role in that organisation.","operationId":"delete-organisation-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissions":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisations permissions","description":"Retrieves all the permissions available to organisations of the Data Exchange Platform.","operationId":"list-organisation-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissionNavigation":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get navigation hierarchy for organisations permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-organisation-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"securitySchemes":{"OAuth2":{"type":"oauth2","flows":{"clientCredentials":{"tokenUrl":"/api/auth/oauth2/token","scopes":{}}}}},"schemas":{"ObjectWithId":{"type":"object","description":"Partial schema for any object that has a property called 'id' that represents its unique ID","required":["id"],"properties":{"id":{"type":"string","description":"The unique ID of this object.","readOnly":true}}},"ConnectedDepDescriptions":{"type":"object","description":"Representing all descriptions associated to a connected DEP. Each description is referenced by the corresponding language iso code.","additionalProperties":{"type":"string"}},"ConnectedDepProperties":{"type":"object","description":"The mutable properties of a connected DEP.","properties":{"name":{"type":"string","description":"A human readable connected DEP name and allows a minimum of connector characters. Requires a minimum length of 1 character and allows a maximum length of 80 characters.","minLength":1,"maxLength":80},"descriptions":{"$ref":"#/components/schemas/ConnectedDepDescriptions"}}},"ConnectedDepReadOnlyProperties":{"type":"object","description":"The immutable properties of a connected DEP.","properties":{"createdAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was created"},"lastModifiedAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was last modified"}}},"RotationRole":{"type":"string","enum":["PRIMARY","SECONDARY"]},"RemoteServiceAccountCredentials":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}},"required":["clientId","clientSecret","rotationRole"]},"RemoteServiceAccount":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"apiEndpoint":{"type":"string","description":"API endpoint of the remote connected DEP"},"credentials":{"description":"List of credentials to access to the remote connected DEP","type":"array","items":{"$ref":"#/components/schemas/RemoteServiceAccountCredentials"}}},"required":["credentials"]},"ConnectedDep":{"type":"object","description":"Represents another Data Exchange Platform connected to this Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ConnectedDepProperties"},{"$ref":"#/components/schemas/ConnectedDepReadOnlyProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}],"required":["id","name","createdAt","lastModifiedAt","remoteServiceAccount"]},"ConnectedDepCreateRequest":{"type":"object","description":"Request used to create a new connected DEP.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"}],"required":["name"]},"Id":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"ConnectedDepPatch":{"type":"object","description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}]},"ObjectAssociatedWithAnotherDep":{"type":"object","description":"Partial schema for any object that is associated with or owned by another Data Exchange Platform","required":["depId"],"properties":{"depId":{"type":"string","description":"The ID of the Data Exchange Platform that owns this object.","readOnly":true}}},"HumanReadableObjectName":{"type":"string","description":"A human readable object name that starts with a letter and allows a minimum of connector characters.\nRequires a minimum length of 2 characters and allows a maximum length of 100 characters.\n","minLength":2,"maxLength":100,"pattern":"^(?:\\p{L}[\\p{L}\\p{Mn}\\p{Nd}\\u2019\\-._,' \\(\\)]{1,99})$","example":"Sample name"},"ServiceAccountProperties":{"type":"object","description":"The properties of a service account.","properties":{"name":{"description":"The name of the service account.","$ref":"#/components/schemas/HumanReadableObjectName"},"description":{"type":"string","description":"A short description of this service account.","maxLength":500}}},"ServiceAccountReadOnlyProperties":{"type":"object","description":"The properties of a service account.","properties":{"active":{"type":"boolean","description":"Indicates whether the service account is active.","readOnly":true}}},"BasicAuditInfo":{"type":"object","description":"Encapsulates basic audit information about this resource","properties":{"createdAtUtc":{"type":"string","format":"date-time","description":"(Optional) The UTC time when this resource was created, if known.","readOnly":true},"createdById":{"type":"string","description":"(Optional) The identifier of the actor who created this resource, if known.","readOnly":true},"lastModifiedAtUtc":{"type":"string","format":"date-time","description":"(Optional) The time in UTC when this resource was last modified, if known.","readOnly":true},"lastModifiedById":{"type":"string","description":"(Optional) The identifier of the actor who last modified this resource, if known.","readOnly":true}}},"DepServiceAccount":{"type":"object","description":"A service account that may be allowed to access this Data Exchange Platform on behalf of another Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectAssociatedWithAnotherDep"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","depId","name","active"]},"ServiceAccountPatch":{"type":"object","description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ServiceAccountProperties"}]},"OAuth2ClientCredentials":{"type":"object","description":"Credentials to use with the OAuth2 client_credentials grant. Includes the client_id, but not the client_secret.\nThe client_secret can be obtained separately.\n","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"lastRotatedUtc":{"type":"string","format":"date-time","description":"The time in UTC that the client_secret was last rotates."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}}},"OAuth2ClientSecret":{"type":"object","description":"The client_secret tu use with the OAuth2 client_credentials grant.\n","properties":{"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."}}},"OrchestrationServiceAccount":{"type":"object","description":"A service account that may be allowed to perform operations on the Data Exchange Platform on behalf of an organisation.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","name","active"]},"ObjectWithKey":{"type":"object","description":"Partial schema for any object that has a property called 'key' that represents its unique key within a given scope","properties":{"key":{"type":"string","description":"The unique KEY of this object in a known scope.","readOnly":true}}},"SecurityTier":{"type":"integer","description":"The security tier to which a permission, role or group belongs. The lower the number, the more critical the security tier. An role cannot contain a permission with a more critical security tier than its own. An group cannot be assigned a role with a more critical security tier than its own.","minimum":0,"maximum":2},"ObjectWithSecurityTier":{"type":"object","description":"Partial schema for any object that has a property called 'securityTier' that represents its security tier","properties":{"securityTier":{"$ref":"#/components/schemas/SecurityTier"}}},"Permission":{"type":"object","description":"A permission on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectWithSecurityTier"}],"required":["key","securityTier"]},"PermissionListResult":{"type":"object","description":"Encapsulates a list permissions in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"required":["items"]},"PermissionNavigationNode":{"type":"object","description":"May contain a logical grouping of permissions and other child nodes.","properties":{"key":{"description":"The key or label of this node","type":"string"},"children":{"description":"Child nodes in the navigation hierarchy","type":"array","items":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"permissionKeys":{"description":"The keys of the permission at this node of the navigation hierarchy","type":"array","items":{"type":"string"}}}},"PermissionNavigationTree":{"type":"object","description":"Represents a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nin which each node may or may not contain permissions and the same permission may be contained by multiple nodes.\n","properties":{"root":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"required":["root"]},"Key":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"RoleProperties":{"type":"object","description":"The properties of a role on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"minimumAssignmentCount":{"type":"integer","description":"A minimum number of subjects to which this role must be assigned at any given time. | Use this mechanism to guarantee a level of redundancy in the assignment of mission-critical roles. | Note that whether the subject of a role assignment is active or inactive/deactivated | is transparent. Role assignments are NOT deleted automatically when their subject is deactivated, | contrary to when their subject is deleted."},"description":{"type":"string","maxLength":500,"description":"The description of the role."},"builtInRole":{"type":"boolean","description":"Indicates whether the role is built-into the Data Exchange Platform, or otherwise is a custom role."},"assignableSubjectTypes":{"type":"array","description":"The types of subjects to which it is allowed to assign this role.","items":{"type":"string"}},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}}}]},"OrchestratorRole":{"type":"object","description":"An orchestrator role on the Data Exchange Platform that can be assigned to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","permissions","assignableSubjectTypes","securityTier","builtInRole","readOnly"]},"OrchestratorRoleListResult":{"type":"object","description":"Encapsulates a list of orchestrator role objects in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRole"}}},"required":["items"]},"RoleCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role.","properties":{"key":{"description":"The unique key by which the new role will be referenced if successfully created. (Optional) If none is provided, the server will generate one.","$ref":"#/components/schemas/Key"},"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"securityTier":{"description":"The security tier of this role.","$ref":"#/components/schemas/SecurityTier"},"description":{"type":"string","maxLength":500,"description":"The description of the role. (Optional)"},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}},"required":["name","securityTier"]},"OrchestrationSubjectType":{"type":"string","enum":["ORCHESTRATOR","SERVICE_ACCOUNT","GROUP"]},"OrchestratorRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"RoleAssignmentProperties":{"type":"object","description":"The properties of a role assignment on the Data Exchange Platform.","properties":{"subjectId":{"description":"The ID of the subject to which the role is assigned","$ref":"#/components/schemas/Id"},"roleKey":{"description":"The unique key of the role assigned.","$ref":"#/components/schemas/Key"}}},"OrchestratorRoleAssignment":{"type":"object","description":"Represents the assignment of an orchestrator role to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","subjectId","roleKey"]},"OrchestratorRoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of orchestrator role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["subjectId","roleKey"]},"OrchestratorRoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]},"OrganisationGlobalRole":{"type":"object","description":"A role that is available to all organisations on the Data Exchange Platform |\nand can be assigned to subjects in any of those organisations |\nbut which is not owned by any singular organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","assignableSubjectTypes","permissions","securityTier","readOnly"]},"OrganisationGlobalRoleListResult":{"type":"object","description":"Encapsulates a list of organisation global roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}},"required":["items"]},"OrganisationSubjectType":{"type":"string","enum":["USER","SERVICE_ACCOUNT","GROUP"]},"OrganisationGlobalRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new organisation global role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"ObjectBelongingToOrganisation":{"type":"object","description":"Partial schema for any object that is associated with or owned by an organisation on the Data Exchange Platform","required":["organisationId"],"properties":{"organisationId":{"type":"string","description":"The ID of the organisation that owns this object.","readOnly":true}}},"GroupProperties":{"type":"object","description":"The properties of an authorization group of any kind on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"type":"string","description":"The name of the authorization group."},"description":{"type":"string","maxLength":500,"description":"The description of the authorization group."},"builtInGroup":{"type":"boolean","description":"Indicates whether the group is built-in on the Data Exchange Platform, or otherwise is a custom group."},"allowedMemberTypes":{"type":"array","description":"The types of subjects which are allowed to become members of the authorization group.","items":{"type":"string"}}}}]},"Group":{"type":"object","description":"An authorization group belonging to an organisation on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupProperties"}],"required":["key","organisationId","name","securityTier","allowedMemberTypes","builtInGroup"]},"GroupListResult":{"type":"object","description":"Encapsulates a list of authorization groups in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}},"required":["items"]},"GroupMembershipProperties":{"type":"object","description":"Properties of a membership in an authorization group of any kind on the Data Exchange Platform.","properties":{"memberId":{"description":"The ID of the subject which is made a member of a group via this membership.","$ref":"#/components/schemas/Id"},"groupKey":{"description":"The unique key of the group in which the subject is made a member.","$ref":"#/components/schemas/Key"}}},"GroupMembership":{"type":"object","description":"A membership of a subject in authorization group belonging to an organisation on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["id","organisationId","memberId","groupKey"]},"GroupMembershipListResult":{"type":"object","description":"Encapsulates a list of authorization group memberships in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/GroupMembership"}}},"required":["items"]},"GroupMembershipCreateRequestProperties":{"type":"object","description":"Properties necessary to create an authorization group membership of any kind.","allOf":[{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["memberId","groupKey"]},"GroupMembershipCreateRequest":{"type":"object","description":"The properties necessary to create an authorization group membership in an organisation.","allOf":[{"$ref":"#/components/schemas/GroupMembershipCreateRequestProperties"}],"required":["memberId","groupKey"]},"Role":{"type":"object","description":"A role that can be assigned to a subject in order to |\ngrant that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleProperties"}],"required":["organisationId","key","name","assignableSubjectTypes","permissions","securityTier","builtInRole"]},"RoleListResult":{"type":"object","description":"Encapsulates a list of roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}},"required":["items"]},"RoleAssignment":{"type":"object","description":"Represents the assignment of a role to a subject, |\nthus granting that subject all the permissions associated with the role in the organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","organisationId","subjectId","roleKey"]},"RoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/RoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a role assignment in an organisation.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]}},"responses":{"400-default":{"description":"Bad request. The request is malformed or contains invalid parameters in the body, URL path, URL query string, or HTTP headers.\n"},"401-default":{"description":"Unauthorized. The caller's authentication credentials are invalid or missing.\n"},"403-default":{"description":"Forbidden. The caller is not allowed to perform this operation.\n"},"404-default":{"description":"Not Found. The specified resource was not found.\n"},"200-default":{"description":"OK"},"204-default":{"description":"No content"},"409-default":{"description":"Conflict. An equivalent resource already exists.\n"},"422-default":{"description":"Unprocessable content. The request is well-formed but violates the semantics or business logic of the server.\n"},"303-see-other-role-assignment":{"description":"See Other | The resource was not created. An equivalent assignment for the same subject and role already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent role assignment resource to the one that was POST-ed"}}},"303-see-other-group-membership":{"description":"See Other | An equivalent membership for the same member in the same group already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent authorization group membership resource to the one that was POST-ed"}}}},"parameters":{"depId":{"name":"depId","description":"The ID of a registered Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"serviceAccountId":{"name":"serviceAccountId","description":"The ID of a service account.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"rotationRole":{"name":"rotationRole","description":"Indicates one of the two client credentials for this service.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/RotationRole"}},"roleKey":{"name":"roleKey","description":"The unique key of a role.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Key"}},"authorizationSubjectIdFilter":{"name":"subjectId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is assigned a role for authorization on the Data Exchange Platform."},"roleKeyFilter":{"name":"roleKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of a role on the Data Exchange Platform. Only results satisfying this filter condition should be returned."},"roleAssignmentId":{"name":"roleAssignmentId","description":"The ID of an role assignment.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"organisationId":{"name":"organisationId","description":"The ID of an organisation registered on the Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"memberIdFilter":{"name":"memberId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is a member in a authorization group."},"groupKeyFilter":{"name":"groupKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of an authorization group. Only results satisfying this filter condition should be returned."},"groupMembershipId":{"name":"groupMembershipId","description":"The ID of an authorization group membership.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}}}}}{"openapi":"3.0.3","info":{"title":"Entitlement API","version":"1.0","description":"Entitlement API\n\nWe use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.\n\n# Authentication\n\nAuth is provided by OAuth2.\n\n<!-- ReDoc-Inject: <security-definitions> -->","contact":{"name":"Dawex","email":"developer@dawex.com"},"license":{"name":"Dawex","url":"https://www.dawex.com/"}},"servers":[{"url":"https://api.{hostname}","variables":{"hostname":{"default":"example.com","description":"The URI hostname of the Data Exchange Platform API"}}}],"security":[{"OAuth2":[]}],"paths":{"/orchestrator/deps":{"get":{"tags":["Connected Dep"],"summary":"Get all connected DEPs","description":"Retrieves all the connected DEPs to this Data Exchange Platform.","operationId":"get-all-connected-deps","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ConnectedDep"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create connected DEP","description":"Creates a new connected DEP to this Data Exchange Platform.","operationId":"create-connected-dep","requestBody":{"description":"The connected DEP to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'string', descriptions: {property1: 'string', property2: 'string'}}));\nreq.end();"}]}},"/orchestrator/deps/{depId}":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get connected DEP","description":"Retrieves the connected DEP with the specified ID.","operationId":"get-connected-dep","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch connected DEP","description":"Updates only the specified properties of connected DEP.","operationId":"patch-connected-dep","requestBody":{"description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  descriptions: {property1: 'string', property2: 'string'},\n  remoteServiceAccount: {\n    apiEndpoint: 'string',\n    credentials: [{clientId: 'string', clientSecret: 'string', rotationRole: 'PRIMARY'}]\n  }\n}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete connected DEP","description":"Deletes the specified connected DEP.","operationId":"delete-connected-dep","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get all service accounts","description":"Retrieves all the service accounts belonging to this DEP.","operationId":"get-all-dep-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DepServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create service account","description":"Creates a new service account for this DEP.","operationId":"create-dep-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account","description":"Retrieves the service account with the specified ID.","operationId":"get-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch service account","description":"Updates only the specified properties of service account.","operationId":"patch-dep-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete service account","description":"Deletes the specified service account.","operationId":"delete-dep-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Activate service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Deactivate service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Connected Dep"],"summary":"Regenerate client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-dep-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts":{"get":{"tags":["Orchestration Service Account"],"summary":"Get all orchestration service accounts","description":"Retrieves all the service accounts used for orchestration of the Data Exchange Platform.","operationId":"get-all-orchestration-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestration Service Account"],"summary":"Create orchestration service account","description":"Creates a new service account that can be used for orchestrating the Data Exchange Platform.","operationId":"create-orchestration-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account","description":"Retrieves the service account with the specified ID.","operationId":"get-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Orchestration Service Account"],"summary":"Patch orchestration service account","description":"Updates only the specified properties of service account.","operationId":"patch-orchestration-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Orchestration Service Account"],"summary":"Delete orchestration service account","description":"Deletes the specified service account.","operationId":"delete-orchestration-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Activate orchestration service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Deactivate orchestration service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Orchestration Service Account"],"summary":"Regenerate orchestration service account client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-orchestration-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissions":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator permissions","description":"Retrieves all the permissions available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissionNavigation":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get navigation hierarchy for orchestrator permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-orchestrator-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roles":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator roles","description":"Retrieves all the roles available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role","description":"Creates a new role available to orchestrators of the Data Exchange Platform.","operationId":"create-orchestrator-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['ORCHESTRATOR']\n}));\nreq.end();"}]}},"/orchestrator/authorization/roles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role","description":"Retrieves the orchestrator role with the specified key.","operationId":"get-orchestrator-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Orchestrator Authorization Management"],"summary":"Update orchestrator role","description":"Updates the orchestrator role with the specified key.","operationId":"update-orchestrator-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role","description":"Delete an orchestrator role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-orchestrator-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments":{"get":{"tags":["Orchestrator Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get orchestrator role assignments","description":"Retrieves all role assignments for orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role assignment","description":"Assigns an orchestrator role to a subject.","operationId":"create-orchestrator-role-assignment","requestBody":{"description":"Specifies the role and the subject to which it is being assigned.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"303":{"$ref":"#/components/responses/303-see-other-role-assignment"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role assignment","description":"Gets the orchestrator role assignment with the specified ID.","operationId":"get-orchestrator-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role assignment","description":"Un-assigns an orchestrator role from a subject.","operationId":"delete-orchestrator-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles":{"get":{"tags":["Organisation Authorization Management"],"summary":"List organisation global roles","description":"Retrieves all the roles globally available to all organisations on the Data Exchange Platform.","operationId":"list-organisation-global-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create organisation global role","description":"Creates a new role globally available to all organisations of the Data Exchange Platform.","operationId":"create-organisation-global-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['USER']\n}));\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisation global role","description":"Retrieves the organisation global role with the specified key.","operationId":"get-organisation-global-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Organisation Authorization Management"],"summary":"Update organisation global role","description":"Updates the organisation global role with the specified key.","operationId":"update-organisation-global-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete organisation global role","description":"Delete an organisation global role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-organisation-global-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groups":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization groups in organisation","description":"Retrieves all the authorization groups available in an organisation","operationId":"list-organisation-groups","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/memberIdFilter"},{"$ref":"#/components/parameters/groupKeyFilter"}],"summary":"List authorization group memberships in organisation","description":"Retrieves all authorization group memberships in an organisation.","operationId":"list-organisation-group-memberships","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'memberId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'groupKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create authorization group membership in organisation","description":"Creates an authorization group membership in an organisation. The new group member must belong to that same organisation.","operationId":"create-organisation-group-membership","requestBody":{"description":"The group membership to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"303":{"$ref":"#/components/responses/303-see-other-group-membership"},"403":{"$ref":"#/components/responses/403-default"},"422":{"description":"Unprocessable Content | - The group indicated by 'groupId' does not exist | -or- The object indicated by 'memberId' does not exist | -or- The group does not allow members of this type"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\"\n\n\tpayload := strings.NewReader(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({memberId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', groupKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships/{groupMembershipId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/groupMembershipId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization group membership in organisation","description":"Retrieves the group membership with the specified ID.","operationId":"get-organisation-group-membership","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete authorization group membership","description":"Deletes the group membership with the specified ID.","operationId":"delete-organisation-group-membership","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roles":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get roles","description":"Retrieves all the roles available in an organisation.","operationId":"list-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get roles assignment for a participant attached to an organization","description":"Retrieves all authorization role assignments in an organisation.","operationId":"list-participant-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create role assignment in organisation","description":"Creates a role assignment in an organisation. The subject of the assignment must be a participant belonging to that same organisation.","operationId":"create-organisation-role-assignment","requestBody":{"description":"The role assignment to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get role assignment","description":"Retrieves the role assignment with the specified ID.","operationId":"get-organisation-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete role assignment","description":"Deletes a role assignment in an organisation. The subject of that assignment will no longer be assigned that role in that organisation.","operationId":"delete-organisation-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissions":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisations permissions","description":"Retrieves all the permissions available to organisations of the Data Exchange Platform.","operationId":"list-organisation-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissionNavigation":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get navigation hierarchy for organisations permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-organisation-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"securitySchemes":{"OAuth2":{"type":"oauth2","flows":{"clientCredentials":{"tokenUrl":"/api/auth/oauth2/token","scopes":{}}}}},"schemas":{"ObjectWithId":{"type":"object","description":"Partial schema for any object that has a property called 'id' that represents its unique ID","required":["id"],"properties":{"id":{"type":"string","description":"The unique ID of this object.","readOnly":true}}},"ConnectedDepDescriptions":{"type":"object","description":"Representing all descriptions associated to a connected DEP. Each description is referenced by the corresponding language iso code.","additionalProperties":{"type":"string"}},"ConnectedDepProperties":{"type":"object","description":"The mutable properties of a connected DEP.","properties":{"name":{"type":"string","description":"A human readable connected DEP name and allows a minimum of connector characters. Requires a minimum length of 1 character and allows a maximum length of 80 characters.","minLength":1,"maxLength":80},"descriptions":{"$ref":"#/components/schemas/ConnectedDepDescriptions"}}},"ConnectedDepReadOnlyProperties":{"type":"object","description":"The immutable properties of a connected DEP.","properties":{"createdAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was created"},"lastModifiedAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was last modified"}}},"RotationRole":{"type":"string","enum":["PRIMARY","SECONDARY"]},"RemoteServiceAccountCredentials":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}},"required":["clientId","clientSecret","rotationRole"]},"RemoteServiceAccount":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"apiEndpoint":{"type":"string","description":"API endpoint of the remote connected DEP"},"credentials":{"description":"List of credentials to access to the remote connected DEP","type":"array","items":{"$ref":"#/components/schemas/RemoteServiceAccountCredentials"}}},"required":["credentials"]},"ConnectedDep":{"type":"object","description":"Represents another Data Exchange Platform connected to this Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ConnectedDepProperties"},{"$ref":"#/components/schemas/ConnectedDepReadOnlyProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}],"required":["id","name","createdAt","lastModifiedAt","remoteServiceAccount"]},"ConnectedDepCreateRequest":{"type":"object","description":"Request used to create a new connected DEP.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"}],"required":["name"]},"Id":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"ConnectedDepPatch":{"type":"object","description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}]},"ObjectAssociatedWithAnotherDep":{"type":"object","description":"Partial schema for any object that is associated with or owned by another Data Exchange Platform","required":["depId"],"properties":{"depId":{"type":"string","description":"The ID of the Data Exchange Platform that owns this object.","readOnly":true}}},"HumanReadableObjectName":{"type":"string","description":"A human readable object name that starts with a letter and allows a minimum of connector characters.\nRequires a minimum length of 2 characters and allows a maximum length of 100 characters.\n","minLength":2,"maxLength":100,"pattern":"^(?:\\p{L}[\\p{L}\\p{Mn}\\p{Nd}\\u2019\\-._,' \\(\\)]{1,99})$","example":"Sample name"},"ServiceAccountProperties":{"type":"object","description":"The properties of a service account.","properties":{"name":{"description":"The name of the service account.","$ref":"#/components/schemas/HumanReadableObjectName"},"description":{"type":"string","description":"A short description of this service account.","maxLength":500}}},"ServiceAccountReadOnlyProperties":{"type":"object","description":"The properties of a service account.","properties":{"active":{"type":"boolean","description":"Indicates whether the service account is active.","readOnly":true}}},"BasicAuditInfo":{"type":"object","description":"Encapsulates basic audit information about this resource","properties":{"createdAtUtc":{"type":"string","format":"date-time","description":"(Optional) The UTC time when this resource was created, if known.","readOnly":true},"createdById":{"type":"string","description":"(Optional) The identifier of the actor who created this resource, if known.","readOnly":true},"lastModifiedAtUtc":{"type":"string","format":"date-time","description":"(Optional) The time in UTC when this resource was last modified, if known.","readOnly":true},"lastModifiedById":{"type":"string","description":"(Optional) The identifier of the actor who last modified this resource, if known.","readOnly":true}}},"DepServiceAccount":{"type":"object","description":"A service account that may be allowed to access this Data Exchange Platform on behalf of another Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectAssociatedWithAnotherDep"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","depId","name","active"]},"ServiceAccountPatch":{"type":"object","description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ServiceAccountProperties"}]},"OAuth2ClientCredentials":{"type":"object","description":"Credentials to use with the OAuth2 client_credentials grant. Includes the client_id, but not the client_secret.\nThe client_secret can be obtained separately.\n","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"lastRotatedUtc":{"type":"string","format":"date-time","description":"The time in UTC that the client_secret was last rotates."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}}},"OAuth2ClientSecret":{"type":"object","description":"The client_secret tu use with the OAuth2 client_credentials grant.\n","properties":{"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."}}},"OrchestrationServiceAccount":{"type":"object","description":"A service account that may be allowed to perform operations on the Data Exchange Platform on behalf of an organisation.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","name","active"]},"ObjectWithKey":{"type":"object","description":"Partial schema for any object that has a property called 'key' that represents its unique key within a given scope","properties":{"key":{"type":"string","description":"The unique KEY of this object in a known scope.","readOnly":true}}},"SecurityTier":{"type":"integer","description":"The security tier to which a permission, role or group belongs. The lower the number, the more critical the security tier. An role cannot contain a permission with a more critical security tier than its own. An group cannot be assigned a role with a more critical security tier than its own.","minimum":0,"maximum":2},"ObjectWithSecurityTier":{"type":"object","description":"Partial schema for any object that has a property called 'securityTier' that represents its security tier","properties":{"securityTier":{"$ref":"#/components/schemas/SecurityTier"}}},"Permission":{"type":"object","description":"A permission on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectWithSecurityTier"}],"required":["key","securityTier"]},"PermissionListResult":{"type":"object","description":"Encapsulates a list permissions in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"required":["items"]},"PermissionNavigationNode":{"type":"object","description":"May contain a logical grouping of permissions and other child nodes.","properties":{"key":{"description":"The key or label of this node","type":"string"},"children":{"description":"Child nodes in the navigation hierarchy","type":"array","items":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"permissionKeys":{"description":"The keys of the permission at this node of the navigation hierarchy","type":"array","items":{"type":"string"}}}},"PermissionNavigationTree":{"type":"object","description":"Represents a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nin which each node may or may not contain permissions and the same permission may be contained by multiple nodes.\n","properties":{"root":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"required":["root"]},"Key":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"RoleProperties":{"type":"object","description":"The properties of a role on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"minimumAssignmentCount":{"type":"integer","description":"A minimum number of subjects to which this role must be assigned at any given time. | Use this mechanism to guarantee a level of redundancy in the assignment of mission-critical roles. | Note that whether the subject of a role assignment is active or inactive/deactivated | is transparent. Role assignments are NOT deleted automatically when their subject is deactivated, | contrary to when their subject is deleted."},"description":{"type":"string","maxLength":500,"description":"The description of the role."},"builtInRole":{"type":"boolean","description":"Indicates whether the role is built-into the Data Exchange Platform, or otherwise is a custom role."},"assignableSubjectTypes":{"type":"array","description":"The types of subjects to which it is allowed to assign this role.","items":{"type":"string"}},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}}}]},"OrchestratorRole":{"type":"object","description":"An orchestrator role on the Data Exchange Platform that can be assigned to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","permissions","assignableSubjectTypes","securityTier","builtInRole","readOnly"]},"OrchestratorRoleListResult":{"type":"object","description":"Encapsulates a list of orchestrator role objects in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRole"}}},"required":["items"]},"RoleCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role.","properties":{"key":{"description":"The unique key by which the new role will be referenced if successfully created. (Optional) If none is provided, the server will generate one.","$ref":"#/components/schemas/Key"},"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"securityTier":{"description":"The security tier of this role.","$ref":"#/components/schemas/SecurityTier"},"description":{"type":"string","maxLength":500,"description":"The description of the role. (Optional)"},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}},"required":["name","securityTier"]},"OrchestrationSubjectType":{"type":"string","enum":["ORCHESTRATOR","SERVICE_ACCOUNT","GROUP"]},"OrchestratorRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"RoleAssignmentProperties":{"type":"object","description":"The properties of a role assignment on the Data Exchange Platform.","properties":{"subjectId":{"description":"The ID of the subject to which the role is assigned","$ref":"#/components/schemas/Id"},"roleKey":{"description":"The unique key of the role assigned.","$ref":"#/components/schemas/Key"}}},"OrchestratorRoleAssignment":{"type":"object","description":"Represents the assignment of an orchestrator role to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","subjectId","roleKey"]},"OrchestratorRoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of orchestrator role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["subjectId","roleKey"]},"OrchestratorRoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]},"OrganisationGlobalRole":{"type":"object","description":"A role that is available to all organisations on the Data Exchange Platform |\nand can be assigned to subjects in any of those organisations |\nbut which is not owned by any singular organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","assignableSubjectTypes","permissions","securityTier","readOnly"]},"OrganisationGlobalRoleListResult":{"type":"object","description":"Encapsulates a list of organisation global roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}},"required":["items"]},"OrganisationSubjectType":{"type":"string","enum":["USER","SERVICE_ACCOUNT","GROUP"]},"OrganisationGlobalRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new organisation global role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"ObjectBelongingToOrganisation":{"type":"object","description":"Partial schema for any object that is associated with or owned by an organisation on the Data Exchange Platform","required":["organisationId"],"properties":{"organisationId":{"type":"string","description":"The ID of the organisation that owns this object.","readOnly":true}}},"GroupProperties":{"type":"object","description":"The properties of an authorization group of any kind on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"type":"string","description":"The name of the authorization group."},"description":{"type":"string","maxLength":500,"description":"The description of the authorization group."},"builtInGroup":{"type":"boolean","description":"Indicates whether the group is built-in on the Data Exchange Platform, or otherwise is a custom group."},"allowedMemberTypes":{"type":"array","description":"The types of subjects which are allowed to become members of the authorization group.","items":{"type":"string"}}}}]},"Group":{"type":"object","description":"An authorization group belonging to an organisation on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupProperties"}],"required":["key","organisationId","name","securityTier","allowedMemberTypes","builtInGroup"]},"GroupListResult":{"type":"object","description":"Encapsulates a list of authorization groups in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}},"required":["items"]},"GroupMembershipProperties":{"type":"object","description":"Properties of a membership in an authorization group of any kind on the Data Exchange Platform.","properties":{"memberId":{"description":"The ID of the subject which is made a member of a group via this membership.","$ref":"#/components/schemas/Id"},"groupKey":{"description":"The unique key of the group in which the subject is made a member.","$ref":"#/components/schemas/Key"}}},"GroupMembership":{"type":"object","description":"A membership of a subject in authorization group belonging to an organisation on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["id","organisationId","memberId","groupKey"]},"GroupMembershipListResult":{"type":"object","description":"Encapsulates a list of authorization group memberships in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/GroupMembership"}}},"required":["items"]},"GroupMembershipCreateRequestProperties":{"type":"object","description":"Properties necessary to create an authorization group membership of any kind.","allOf":[{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["memberId","groupKey"]},"GroupMembershipCreateRequest":{"type":"object","description":"The properties necessary to create an authorization group membership in an organisation.","allOf":[{"$ref":"#/components/schemas/GroupMembershipCreateRequestProperties"}],"required":["memberId","groupKey"]},"Role":{"type":"object","description":"A role that can be assigned to a subject in order to |\ngrant that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleProperties"}],"required":["organisationId","key","name","assignableSubjectTypes","permissions","securityTier","builtInRole"]},"RoleListResult":{"type":"object","description":"Encapsulates a list of roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}},"required":["items"]},"RoleAssignment":{"type":"object","description":"Represents the assignment of a role to a subject, |\nthus granting that subject all the permissions associated with the role in the organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","organisationId","subjectId","roleKey"]},"RoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/RoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a role assignment in an organisation.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]}},"responses":{"400-default":{"description":"Bad request. The request is malformed or contains invalid parameters in the body, URL path, URL query string, or HTTP headers.\n"},"401-default":{"description":"Unauthorized. The caller's authentication credentials are invalid or missing.\n"},"403-default":{"description":"Forbidden. The caller is not allowed to perform this operation.\n"},"404-default":{"description":"Not Found. The specified resource was not found.\n"},"200-default":{"description":"OK"},"204-default":{"description":"No content"},"409-default":{"description":"Conflict. An equivalent resource already exists.\n"},"422-default":{"description":"Unprocessable content. The request is well-formed but violates the semantics or business logic of the server.\n"},"303-see-other-role-assignment":{"description":"See Other | The resource was not created. An equivalent assignment for the same subject and role already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent role assignment resource to the one that was POST-ed"}}},"303-see-other-group-membership":{"description":"See Other | An equivalent membership for the same member in the same group already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent authorization group membership resource to the one that was POST-ed"}}}},"parameters":{"depId":{"name":"depId","description":"The ID of a registered Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"serviceAccountId":{"name":"serviceAccountId","description":"The ID of a service account.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"rotationRole":{"name":"rotationRole","description":"Indicates one of the two client credentials for this service.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/RotationRole"}},"roleKey":{"name":"roleKey","description":"The unique key of a role.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Key"}},"authorizationSubjectIdFilter":{"name":"subjectId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is assigned a role for authorization on the Data Exchange Platform."},"roleKeyFilter":{"name":"roleKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of a role on the Data Exchange Platform. Only results satisfying this filter condition should be returned."},"roleAssignmentId":{"name":"roleAssignmentId","description":"The ID of an role assignment.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"organisationId":{"name":"organisationId","description":"The ID of an organisation registered on the Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"memberIdFilter":{"name":"memberId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is a member in a authorization group."},"groupKeyFilter":{"name":"groupKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of an authorization group. Only results satisfying this filter condition should be returned."},"groupMembershipId":{"name":"groupMembershipId","description":"The ID of an authorization group membership.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}}}}}{"openapi":"3.0.3","info":{"title":"Entitlement API","version":"1.0","description":"Entitlement API\n\nWe use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.\n\n# Authentication\n\nAuth is provided by OAuth2.\n\n<!-- ReDoc-Inject: <security-definitions> -->","contact":{"name":"Dawex","email":"developer@dawex.com"},"license":{"name":"Dawex","url":"https://www.dawex.com/"}},"servers":[{"url":"https://api.{hostname}","variables":{"hostname":{"default":"example.com","description":"The URI hostname of the Data Exchange Platform API"}}}],"security":[{"OAuth2":[]}],"paths":{"/orchestrator/deps":{"get":{"tags":["Connected Dep"],"summary":"Get all connected DEPs","description":"Retrieves all the connected DEPs to this Data Exchange Platform.","operationId":"get-all-connected-deps","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ConnectedDep"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create connected DEP","description":"Creates a new connected DEP to this Data Exchange Platform.","operationId":"create-connected-dep","requestBody":{"description":"The connected DEP to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'string', descriptions: {property1: 'string', property2: 'string'}}));\nreq.end();"}]}},"/orchestrator/deps/{depId}":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get connected DEP","description":"Retrieves the connected DEP with the specified ID.","operationId":"get-connected-dep","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch connected DEP","description":"Updates only the specified properties of connected DEP.","operationId":"patch-connected-dep","requestBody":{"description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  descriptions: {property1: 'string', property2: 'string'},\n  remoteServiceAccount: {\n    apiEndpoint: 'string',\n    credentials: [{clientId: 'string', clientSecret: 'string', rotationRole: 'PRIMARY'}]\n  }\n}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete connected DEP","description":"Deletes the specified connected DEP.","operationId":"delete-connected-dep","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get all service accounts","description":"Retrieves all the service accounts belonging to this DEP.","operationId":"get-all-dep-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DepServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create service account","description":"Creates a new service account for this DEP.","operationId":"create-dep-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account","description":"Retrieves the service account with the specified ID.","operationId":"get-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch service account","description":"Updates only the specified properties of service account.","operationId":"patch-dep-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete service account","description":"Deletes the specified service account.","operationId":"delete-dep-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Activate service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Deactivate service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Connected Dep"],"summary":"Regenerate client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-dep-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts":{"get":{"tags":["Orchestration Service Account"],"summary":"Get all orchestration service accounts","description":"Retrieves all the service accounts used for orchestration of the Data Exchange Platform.","operationId":"get-all-orchestration-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestration Service Account"],"summary":"Create orchestration service account","description":"Creates a new service account that can be used for orchestrating the Data Exchange Platform.","operationId":"create-orchestration-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account","description":"Retrieves the service account with the specified ID.","operationId":"get-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Orchestration Service Account"],"summary":"Patch orchestration service account","description":"Updates only the specified properties of service account.","operationId":"patch-orchestration-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Orchestration Service Account"],"summary":"Delete orchestration service account","description":"Deletes the specified service account.","operationId":"delete-orchestration-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Activate orchestration service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Deactivate orchestration service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Orchestration Service Account"],"summary":"Regenerate orchestration service account client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-orchestration-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissions":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator permissions","description":"Retrieves all the permissions available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissionNavigation":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get navigation hierarchy for orchestrator permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-orchestrator-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roles":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator roles","description":"Retrieves all the roles available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role","description":"Creates a new role available to orchestrators of the Data Exchange Platform.","operationId":"create-orchestrator-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['ORCHESTRATOR']\n}));\nreq.end();"}]}},"/orchestrator/authorization/roles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role","description":"Retrieves the orchestrator role with the specified key.","operationId":"get-orchestrator-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Orchestrator Authorization Management"],"summary":"Update orchestrator role","description":"Updates the orchestrator role with the specified key.","operationId":"update-orchestrator-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role","description":"Delete an orchestrator role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-orchestrator-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments":{"get":{"tags":["Orchestrator Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get orchestrator role assignments","description":"Retrieves all role assignments for orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role assignment","description":"Assigns an orchestrator role to a subject.","operationId":"create-orchestrator-role-assignment","requestBody":{"description":"Specifies the role and the subject to which it is being assigned.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"303":{"$ref":"#/components/responses/303-see-other-role-assignment"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role assignment","description":"Gets the orchestrator role assignment with the specified ID.","operationId":"get-orchestrator-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role assignment","description":"Un-assigns an orchestrator role from a subject.","operationId":"delete-orchestrator-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles":{"get":{"tags":["Organisation Authorization Management"],"summary":"List organisation global roles","description":"Retrieves all the roles globally available to all organisations on the Data Exchange Platform.","operationId":"list-organisation-global-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create organisation global role","description":"Creates a new role globally available to all organisations of the Data Exchange Platform.","operationId":"create-organisation-global-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['USER']\n}));\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisation global role","description":"Retrieves the organisation global role with the specified key.","operationId":"get-organisation-global-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Organisation Authorization Management"],"summary":"Update organisation global role","description":"Updates the organisation global role with the specified key.","operationId":"update-organisation-global-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete organisation global role","description":"Delete an organisation global role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-organisation-global-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groups":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization groups in organisation","description":"Retrieves all the authorization groups available in an organisation","operationId":"list-organisation-groups","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/memberIdFilter"},{"$ref":"#/components/parameters/groupKeyFilter"}],"summary":"List authorization group memberships in organisation","description":"Retrieves all authorization group memberships in an organisation.","operationId":"list-organisation-group-memberships","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'memberId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'groupKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create authorization group membership in organisation","description":"Creates an authorization group membership in an organisation. The new group member must belong to that same organisation.","operationId":"create-organisation-group-membership","requestBody":{"description":"The group membership to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"303":{"$ref":"#/components/responses/303-see-other-group-membership"},"403":{"$ref":"#/components/responses/403-default"},"422":{"description":"Unprocessable Content | - The group indicated by 'groupId' does not exist | -or- The object indicated by 'memberId' does not exist | -or- The group does not allow members of this type"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\"\n\n\tpayload := strings.NewReader(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({memberId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', groupKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships/{groupMembershipId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/groupMembershipId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization group membership in organisation","description":"Retrieves the group membership with the specified ID.","operationId":"get-organisation-group-membership","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete authorization group membership","description":"Deletes the group membership with the specified ID.","operationId":"delete-organisation-group-membership","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roles":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get roles","description":"Retrieves all the roles available in an organisation.","operationId":"list-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get roles assignment for a participant attached to an organization","description":"Retrieves all authorization role assignments in an organisation.","operationId":"list-participant-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create role assignment in organisation","description":"Creates a role assignment in an organisation. The subject of the assignment must be a participant belonging to that same organisation.","operationId":"create-organisation-role-assignment","requestBody":{"description":"The role assignment to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get role assignment","description":"Retrieves the role assignment with the specified ID.","operationId":"get-organisation-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete role assignment","description":"Deletes a role assignment in an organisation. The subject of that assignment will no longer be assigned that role in that organisation.","operationId":"delete-organisation-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissions":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisations permissions","description":"Retrieves all the permissions available to organisations of the Data Exchange Platform.","operationId":"list-organisation-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissionNavigation":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get navigation hierarchy for organisations permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-organisation-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"securitySchemes":{"OAuth2":{"type":"oauth2","flows":{"clientCredentials":{"tokenUrl":"/api/auth/oauth2/token","scopes":{}}}}},"schemas":{"ObjectWithId":{"type":"object","description":"Partial schema for any object that has a property called 'id' that represents its unique ID","required":["id"],"properties":{"id":{"type":"string","description":"The unique ID of this object.","readOnly":true}}},"ConnectedDepDescriptions":{"type":"object","description":"Representing all descriptions associated to a connected DEP. Each description is referenced by the corresponding language iso code.","additionalProperties":{"type":"string"}},"ConnectedDepProperties":{"type":"object","description":"The mutable properties of a connected DEP.","properties":{"name":{"type":"string","description":"A human readable connected DEP name and allows a minimum of connector characters. Requires a minimum length of 1 character and allows a maximum length of 80 characters.","minLength":1,"maxLength":80},"descriptions":{"$ref":"#/components/schemas/ConnectedDepDescriptions"}}},"ConnectedDepReadOnlyProperties":{"type":"object","description":"The immutable properties of a connected DEP.","properties":{"createdAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was created"},"lastModifiedAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was last modified"}}},"RotationRole":{"type":"string","enum":["PRIMARY","SECONDARY"]},"RemoteServiceAccountCredentials":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}},"required":["clientId","clientSecret","rotationRole"]},"RemoteServiceAccount":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"apiEndpoint":{"type":"string","description":"API endpoint of the remote connected DEP"},"credentials":{"description":"List of credentials to access to the remote connected DEP","type":"array","items":{"$ref":"#/components/schemas/RemoteServiceAccountCredentials"}}},"required":["credentials"]},"ConnectedDep":{"type":"object","description":"Represents another Data Exchange Platform connected to this Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ConnectedDepProperties"},{"$ref":"#/components/schemas/ConnectedDepReadOnlyProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}],"required":["id","name","createdAt","lastModifiedAt","remoteServiceAccount"]},"ConnectedDepCreateRequest":{"type":"object","description":"Request used to create a new connected DEP.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"}],"required":["name"]},"Id":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"ConnectedDepPatch":{"type":"object","description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}]},"ObjectAssociatedWithAnotherDep":{"type":"object","description":"Partial schema for any object that is associated with or owned by another Data Exchange Platform","required":["depId"],"properties":{"depId":{"type":"string","description":"The ID of the Data Exchange Platform that owns this object.","readOnly":true}}},"HumanReadableObjectName":{"type":"string","description":"A human readable object name that starts with a letter and allows a minimum of connector characters.\nRequires a minimum length of 2 characters and allows a maximum length of 100 characters.\n","minLength":2,"maxLength":100,"pattern":"^(?:\\p{L}[\\p{L}\\p{Mn}\\p{Nd}\\u2019\\-._,' \\(\\)]{1,99})$","example":"Sample name"},"ServiceAccountProperties":{"type":"object","description":"The properties of a service account.","properties":{"name":{"description":"The name of the service account.","$ref":"#/components/schemas/HumanReadableObjectName"},"description":{"type":"string","description":"A short description of this service account.","maxLength":500}}},"ServiceAccountReadOnlyProperties":{"type":"object","description":"The properties of a service account.","properties":{"active":{"type":"boolean","description":"Indicates whether the service account is active.","readOnly":true}}},"BasicAuditInfo":{"type":"object","description":"Encapsulates basic audit information about this resource","properties":{"createdAtUtc":{"type":"string","format":"date-time","description":"(Optional) The UTC time when this resource was created, if known.","readOnly":true},"createdById":{"type":"string","description":"(Optional) The identifier of the actor who created this resource, if known.","readOnly":true},"lastModifiedAtUtc":{"type":"string","format":"date-time","description":"(Optional) The time in UTC when this resource was last modified, if known.","readOnly":true},"lastModifiedById":{"type":"string","description":"(Optional) The identifier of the actor who last modified this resource, if known.","readOnly":true}}},"DepServiceAccount":{"type":"object","description":"A service account that may be allowed to access this Data Exchange Platform on behalf of another Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectAssociatedWithAnotherDep"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","depId","name","active"]},"ServiceAccountPatch":{"type":"object","description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ServiceAccountProperties"}]},"OAuth2ClientCredentials":{"type":"object","description":"Credentials to use with the OAuth2 client_credentials grant. Includes the client_id, but not the client_secret.\nThe client_secret can be obtained separately.\n","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"lastRotatedUtc":{"type":"string","format":"date-time","description":"The time in UTC that the client_secret was last rotates."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}}},"OAuth2ClientSecret":{"type":"object","description":"The client_secret tu use with the OAuth2 client_credentials grant.\n","properties":{"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."}}},"OrchestrationServiceAccount":{"type":"object","description":"A service account that may be allowed to perform operations on the Data Exchange Platform on behalf of an organisation.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","name","active"]},"ObjectWithKey":{"type":"object","description":"Partial schema for any object that has a property called 'key' that represents its unique key within a given scope","properties":{"key":{"type":"string","description":"The unique KEY of this object in a known scope.","readOnly":true}}},"SecurityTier":{"type":"integer","description":"The security tier to which a permission, role or group belongs. The lower the number, the more critical the security tier. An role cannot contain a permission with a more critical security tier than its own. An group cannot be assigned a role with a more critical security tier than its own.","minimum":0,"maximum":2},"ObjectWithSecurityTier":{"type":"object","description":"Partial schema for any object that has a property called 'securityTier' that represents its security tier","properties":{"securityTier":{"$ref":"#/components/schemas/SecurityTier"}}},"Permission":{"type":"object","description":"A permission on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectWithSecurityTier"}],"required":["key","securityTier"]},"PermissionListResult":{"type":"object","description":"Encapsulates a list permissions in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"required":["items"]},"PermissionNavigationNode":{"type":"object","description":"May contain a logical grouping of permissions and other child nodes.","properties":{"key":{"description":"The key or label of this node","type":"string"},"children":{"description":"Child nodes in the navigation hierarchy","type":"array","items":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"permissionKeys":{"description":"The keys of the permission at this node of the navigation hierarchy","type":"array","items":{"type":"string"}}}},"PermissionNavigationTree":{"type":"object","description":"Represents a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nin which each node may or may not contain permissions and the same permission may be contained by multiple nodes.\n","properties":{"root":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"required":["root"]},"Key":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"RoleProperties":{"type":"object","description":"The properties of a role on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"minimumAssignmentCount":{"type":"integer","description":"A minimum number of subjects to which this role must be assigned at any given time. | Use this mechanism to guarantee a level of redundancy in the assignment of mission-critical roles. | Note that whether the subject of a role assignment is active or inactive/deactivated | is transparent. Role assignments are NOT deleted automatically when their subject is deactivated, | contrary to when their subject is deleted."},"description":{"type":"string","maxLength":500,"description":"The description of the role."},"builtInRole":{"type":"boolean","description":"Indicates whether the role is built-into the Data Exchange Platform, or otherwise is a custom role."},"assignableSubjectTypes":{"type":"array","description":"The types of subjects to which it is allowed to assign this role.","items":{"type":"string"}},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}}}]},"OrchestratorRole":{"type":"object","description":"An orchestrator role on the Data Exchange Platform that can be assigned to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","permissions","assignableSubjectTypes","securityTier","builtInRole","readOnly"]},"OrchestratorRoleListResult":{"type":"object","description":"Encapsulates a list of orchestrator role objects in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRole"}}},"required":["items"]},"RoleCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role.","properties":{"key":{"description":"The unique key by which the new role will be referenced if successfully created. (Optional) If none is provided, the server will generate one.","$ref":"#/components/schemas/Key"},"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"securityTier":{"description":"The security tier of this role.","$ref":"#/components/schemas/SecurityTier"},"description":{"type":"string","maxLength":500,"description":"The description of the role. (Optional)"},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}},"required":["name","securityTier"]},"OrchestrationSubjectType":{"type":"string","enum":["ORCHESTRATOR","SERVICE_ACCOUNT","GROUP"]},"OrchestratorRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"RoleAssignmentProperties":{"type":"object","description":"The properties of a role assignment on the Data Exchange Platform.","properties":{"subjectId":{"description":"The ID of the subject to which the role is assigned","$ref":"#/components/schemas/Id"},"roleKey":{"description":"The unique key of the role assigned.","$ref":"#/components/schemas/Key"}}},"OrchestratorRoleAssignment":{"type":"object","description":"Represents the assignment of an orchestrator role to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","subjectId","roleKey"]},"OrchestratorRoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of orchestrator role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["subjectId","roleKey"]},"OrchestratorRoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]},"OrganisationGlobalRole":{"type":"object","description":"A role that is available to all organisations on the Data Exchange Platform |\nand can be assigned to subjects in any of those organisations |\nbut which is not owned by any singular organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","assignableSubjectTypes","permissions","securityTier","readOnly"]},"OrganisationGlobalRoleListResult":{"type":"object","description":"Encapsulates a list of organisation global roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}},"required":["items"]},"OrganisationSubjectType":{"type":"string","enum":["USER","SERVICE_ACCOUNT","GROUP"]},"OrganisationGlobalRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new organisation global role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"ObjectBelongingToOrganisation":{"type":"object","description":"Partial schema for any object that is associated with or owned by an organisation on the Data Exchange Platform","required":["organisationId"],"properties":{"organisationId":{"type":"string","description":"The ID of the organisation that owns this object.","readOnly":true}}},"GroupProperties":{"type":"object","description":"The properties of an authorization group of any kind on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"type":"string","description":"The name of the authorization group."},"description":{"type":"string","maxLength":500,"description":"The description of the authorization group."},"builtInGroup":{"type":"boolean","description":"Indicates whether the group is built-in on the Data Exchange Platform, or otherwise is a custom group."},"allowedMemberTypes":{"type":"array","description":"The types of subjects which are allowed to become members of the authorization group.","items":{"type":"string"}}}}]},"Group":{"type":"object","description":"An authorization group belonging to an organisation on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupProperties"}],"required":["key","organisationId","name","securityTier","allowedMemberTypes","builtInGroup"]},"GroupListResult":{"type":"object","description":"Encapsulates a list of authorization groups in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}},"required":["items"]},"GroupMembershipProperties":{"type":"object","description":"Properties of a membership in an authorization group of any kind on the Data Exchange Platform.","properties":{"memberId":{"description":"The ID of the subject which is made a member of a group via this membership.","$ref":"#/components/schemas/Id"},"groupKey":{"description":"The unique key of the group in which the subject is made a member.","$ref":"#/components/schemas/Key"}}},"GroupMembership":{"type":"object","description":"A membership of a subject in authorization group belonging to an organisation on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["id","organisationId","memberId","groupKey"]},"GroupMembershipListResult":{"type":"object","description":"Encapsulates a list of authorization group memberships in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/GroupMembership"}}},"required":["items"]},"GroupMembershipCreateRequestProperties":{"type":"object","description":"Properties necessary to create an authorization group membership of any kind.","allOf":[{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["memberId","groupKey"]},"GroupMembershipCreateRequest":{"type":"object","description":"The properties necessary to create an authorization group membership in an organisation.","allOf":[{"$ref":"#/components/schemas/GroupMembershipCreateRequestProperties"}],"required":["memberId","groupKey"]},"Role":{"type":"object","description":"A role that can be assigned to a subject in order to |\ngrant that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleProperties"}],"required":["organisationId","key","name","assignableSubjectTypes","permissions","securityTier","builtInRole"]},"RoleListResult":{"type":"object","description":"Encapsulates a list of roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}},"required":["items"]},"RoleAssignment":{"type":"object","description":"Represents the assignment of a role to a subject, |\nthus granting that subject all the permissions associated with the role in the organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","organisationId","subjectId","roleKey"]},"RoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/RoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a role assignment in an organisation.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]}},"responses":{"400-default":{"description":"Bad request. The request is malformed or contains invalid parameters in the body, URL path, URL query string, or HTTP headers.\n"},"401-default":{"description":"Unauthorized. The caller's authentication credentials are invalid or missing.\n"},"403-default":{"description":"Forbidden. The caller is not allowed to perform this operation.\n"},"404-default":{"description":"Not Found. The specified resource was not found.\n"},"200-default":{"description":"OK"},"204-default":{"description":"No content"},"409-default":{"description":"Conflict. An equivalent resource already exists.\n"},"422-default":{"description":"Unprocessable content. The request is well-formed but violates the semantics or business logic of the server.\n"},"303-see-other-role-assignment":{"description":"See Other | The resource was not created. An equivalent assignment for the same subject and role already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent role assignment resource to the one that was POST-ed"}}},"303-see-other-group-membership":{"description":"See Other | An equivalent membership for the same member in the same group already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent authorization group membership resource to the one that was POST-ed"}}}},"parameters":{"depId":{"name":"depId","description":"The ID of a registered Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"serviceAccountId":{"name":"serviceAccountId","description":"The ID of a service account.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"rotationRole":{"name":"rotationRole","description":"Indicates one of the two client credentials for this service.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/RotationRole"}},"roleKey":{"name":"roleKey","description":"The unique key of a role.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Key"}},"authorizationSubjectIdFilter":{"name":"subjectId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is assigned a role for authorization on the Data Exchange Platform."},"roleKeyFilter":{"name":"roleKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of a role on the Data Exchange Platform. Only results satisfying this filter condition should be returned."},"roleAssignmentId":{"name":"roleAssignmentId","description":"The ID of an role assignment.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"organisationId":{"name":"organisationId","description":"The ID of an organisation registered on the Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"memberIdFilter":{"name":"memberId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is a member in a authorization group."},"groupKeyFilter":{"name":"groupKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of an authorization group. Only results satisfying this filter condition should be returned."},"groupMembershipId":{"name":"groupMembershipId","description":"The ID of an authorization group membership.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}}}}}{"openapi":"3.0.3","info":{"title":"Entitlement API","version":"1.0","description":"Entitlement API\n\nWe use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.\n\n# Authentication\n\nAuth is provided by OAuth2.\n\n<!-- ReDoc-Inject: <security-definitions> -->","contact":{"name":"Dawex","email":"developer@dawex.com"},"license":{"name":"Dawex","url":"https://www.dawex.com/"}},"servers":[{"url":"https://api.{hostname}","variables":{"hostname":{"default":"example.com","description":"The URI hostname of the Data Exchange Platform API"}}}],"security":[{"OAuth2":[]}],"paths":{"/orchestrator/deps":{"get":{"tags":["Connected Dep"],"summary":"Get all connected DEPs","description":"Retrieves all the connected DEPs to this Data Exchange Platform.","operationId":"get-all-connected-deps","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ConnectedDep"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create connected DEP","description":"Creates a new connected DEP to this Data Exchange Platform.","operationId":"create-connected-dep","requestBody":{"description":"The connected DEP to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'string', descriptions: {property1: 'string', property2: 'string'}}));\nreq.end();"}]}},"/orchestrator/deps/{depId}":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get connected DEP","description":"Retrieves the connected DEP with the specified ID.","operationId":"get-connected-dep","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch connected DEP","description":"Updates only the specified properties of connected DEP.","operationId":"patch-connected-dep","requestBody":{"description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDepPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConnectedDep"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\",\"descriptions\":{\"property1\":\"string\",\"property2\":\"string\"},\"remoteServiceAccount\":{\"apiEndpoint\":\"string\",\"credentials\":[{\"clientId\":\"string\",\"clientSecret\":\"string\",\"rotationRole\":\"PRIMARY\"}]}}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"descriptions\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"remoteServiceAccount\\\":{\\\"apiEndpoint\\\":\\\"string\\\",\\\"credentials\\\":[{\\\"clientId\\\":\\\"string\\\",\\\"clientSecret\\\":\\\"string\\\",\\\"rotationRole\\\":\\\"PRIMARY\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  descriptions: {property1: 'string', property2: 'string'},\n  remoteServiceAccount: {\n    apiEndpoint: 'string',\n    credentials: [{clientId: 'string', clientSecret: 'string', rotationRole: 'PRIMARY'}]\n  }\n}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete connected DEP","description":"Deletes the specified connected DEP.","operationId":"delete-connected-dep","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts":{"parameters":[{"$ref":"#/components/parameters/depId"}],"get":{"tags":["Connected Dep"],"summary":"Get all service accounts","description":"Retrieves all the service accounts belonging to this DEP.","operationId":"get-all-dep-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DepServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Connected Dep"],"summary":"Create service account","description":"Creates a new service account for this DEP.","operationId":"create-dep-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account","description":"Retrieves the service account with the specified ID.","operationId":"get-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Connected Dep"],"summary":"Patch service account","description":"Updates only the specified properties of service account.","operationId":"patch-dep-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Connected Dep"],"summary":"Delete service account","description":"Deletes the specified service account.","operationId":"delete-dep-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Activate service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Connected Dep"],"summary":"Deactivate service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-dep-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Connected Dep"],"summary":"Regenerate client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-dep-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/deps/{depId}/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/depId"},{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Connected Dep"],"summary":"Get service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-dep-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/deps/%7BdepId%7D/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts":{"get":{"tags":["Orchestration Service Account"],"summary":"Get all orchestration service accounts","description":"Retrieves all the service accounts used for orchestration of the Data Exchange Platform.","operationId":"get-all-orchestration-service-accounts","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestration Service Account"],"summary":"Create orchestration service account","description":"Creates a new service account that can be used for orchestrating the Data Exchange Platform.","operationId":"create-orchestration-service-account","requestBody":{"description":"The service account to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account","description":"Retrieves the service account with the specified ID.","operationId":"get-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"patch":{"tags":["Orchestration Service Account"],"summary":"Patch orchestration service account","description":"Updates only the specified properties of service account.","operationId":"patch-orchestration-service-account","requestBody":{"description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAccountPatch"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PATCH \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Sample name\",\"description\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.patch(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Sample name\",\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"name\\\":\\\"Sample name\\\",\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'Sample name', description: 'string'}));\nreq.end();"}]},"delete":{"tags":["Orchestration Service Account"],"summary":"Delete orchestration service account","description":"Deletes the specified service account.","operationId":"delete-orchestration-service-account","responses":{"200":{"$ref":"#/components/responses/200-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/activate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Activate orchestration service account","description":"Activates the service account with the specified ID. Returns the activated account","operationId":"activate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/activate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/deactivate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"post":{"tags":["Orchestration Service Account"],"summary":"Deactivate orchestration service account","description":"Deactivates the service account with the specified ID. Returns the deactivated account.","operationId":"deactivate-orchestration-service-account","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestrationServiceAccount"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/deactivate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials","description":"Retrieves the OAuth2 client credentials for the specified service account.","operationId":"get-all-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","description":"The primary and secondary client credentials for the service account","items":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account credentials by role in rotation","description":"Retrieves the specified OAuth2 client credentials for the service account.","operationId":"get-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/regenerate":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"post":{"tags":["Orchestration Service Account"],"summary":"Regenerate orchestration service account client credentials","description":"Regenerates the specified OAuth2 client credentials for the service account.","operationId":"regenerate-orchestration-service-account-oauth2-client-credentials","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientCredentials"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/regenerate\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/serviceAccounts/{serviceAccountId}/oauth2Credentials/{rotationRole}/clientSecret":{"parameters":[{"$ref":"#/components/parameters/serviceAccountId"},{"$ref":"#/components/parameters/rotationRole"}],"get":{"tags":["Orchestration Service Account"],"summary":"Get orchestration service account client secret","description":"Retrieves the specified OAuth2 client secret for the service account.","operationId":"get-orchestration-service-account-oauth2-client-secret","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OAuth2ClientSecret"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/serviceAccounts/%7BserviceAccountId%7D/oauth2Credentials/%7BrotationRole%7D/clientSecret\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissions":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator permissions","description":"Retrieves all the permissions available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/permissionNavigation":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get navigation hierarchy for orchestrator permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-orchestrator-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roles":{"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator roles","description":"Retrieves all the roles available to orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role","description":"Creates a new role available to orchestrators of the Data Exchange Platform.","operationId":"create-orchestrator-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"ORCHESTRATOR\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"ORCHESTRATOR\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['ORCHESTRATOR']\n}));\nreq.end();"}]}},"/orchestrator/authorization/roles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role","description":"Retrieves the orchestrator role with the specified key.","operationId":"get-orchestrator-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Orchestrator Authorization Management"],"summary":"Update orchestrator role","description":"Updates the orchestrator role with the specified key.","operationId":"update-orchestrator-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role","description":"Delete an orchestrator role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-orchestrator-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments":{"get":{"tags":["Orchestrator Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get orchestrator role assignments","description":"Retrieves all role assignments for orchestrators of the Data Exchange Platform.","operationId":"list-orchestrator-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Orchestrator Authorization Management"],"summary":"Create orchestrator role assignment","description":"Assigns an orchestrator role to a subject.","operationId":"create-orchestrator-role-assignment","requestBody":{"description":"Specifies the role and the subject to which it is being assigned.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignmentCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"303":{"$ref":"#/components/responses/303-see-other-role-assignment"},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Orchestrator Authorization Management"],"summary":"Get orchestrator role assignment","description":"Gets the orchestrator role assignment with the specified ID.","operationId":"get-orchestrator-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Orchestrator Authorization Management"],"summary":"Delete orchestrator role assignment","description":"Un-assigns an orchestrator role from a subject.","operationId":"delete-orchestrator-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles":{"get":{"tags":["Organisation Authorization Management"],"summary":"List organisation global roles","description":"Retrieves all the roles globally available to all organisations on the Data Exchange Platform.","operationId":"list-organisation-global-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create organisation global role","description":"Creates a new role globally available to all organisations of the Data Exchange Platform.","operationId":"create-organisation-global-role","requestBody":{"description":"Specifies the key, name and permissions of the new role","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRoleCreateRequest"}}}},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"$ref":"#/components/responses/409-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\"\n\n\tpayload := strings.NewReader(\"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key\":\"string\",\"name\":\"Sample name\",\"securityTier\":2,\"description\":\"string\",\"permissions\":[\"string\"],\"assignableSubjectTypes\":[\"USER\"]}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"key\\\":\\\"string\\\",\\\"name\\\":\\\"Sample name\\\",\\\"securityTier\\\":2,\\\"description\\\":\\\"string\\\",\\\"permissions\\\":[\\\"string\\\"],\\\"assignableSubjectTypes\\\":[\\\"USER\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key: 'string',\n  name: 'Sample name',\n  securityTier: 2,\n  description: 'string',\n  permissions: ['string'],\n  assignableSubjectTypes: ['USER']\n}));\nreq.end();"}]}},"/orchestrator/authorization/organisationGlobalRoles/{roleKey}":{"parameters":[{"$ref":"#/components/parameters/roleKey"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisation global role","description":"Retrieves the organisation global role with the specified key.","operationId":"get-organisation-global-role","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"put":{"tags":["Organisation Authorization Management"],"summary":"Update organisation global role","description":"Updates the organisation global role with the specified key.","operationId":"update-organisation-global-role","requestBody":{"description":"Specifies the updated role in full (i.e. with all of its properties). The server will ignore any changes to read-only properties.","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}}},"400":{"$ref":"#/components/responses/400-default"},"403":{"$ref":"#/components/responses/403-default"},"422":{"$ref":"#/components/responses/422-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"securityTier\":2,\"name\":\"Sample name\",\"minimumAssignmentCount\":0,\"description\":\"string\",\"builtInRole\":true,\"assignableSubjectTypes\":[\"string\"],\"permissions\":[\"string\"],\"readOnly\":true}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"securityTier\\\":2,\\\"name\\\":\\\"Sample name\\\",\\\"minimumAssignmentCount\\\":0,\\\"description\\\":\\\"string\\\",\\\"builtInRole\\\":true,\\\"assignableSubjectTypes\\\":[\\\"string\\\"],\\\"permissions\\\":[\\\"string\\\"],\\\"readOnly\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  securityTier: 2,\n  name: 'Sample name',\n  minimumAssignmentCount: 0,\n  description: 'string',\n  builtInRole: true,\n  assignableSubjectTypes: ['string'],\n  permissions: ['string'],\n  readOnly: true\n}));\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete organisation global role","description":"Delete an organisation global role. This operation will fail if the role is currently assigned to subjects. |\nAll assignments of this role must be deleted before the role itself can be deleted.\n","operationId":"delete-organisation-global-role","responses":{"200":{"$ref":"#/components/responses/200-default"},"204":{"$ref":"#/components/responses/204-default"},"403":{"$ref":"#/components/responses/403-default"},"409":{"description":"Conflict. Cannot delete a role while it is still assigned to at least one subject.\n"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisationGlobalRoles/%7BroleKey%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groups":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization groups in organisation","description":"Retrieves all the authorization groups available in an organisation","operationId":"list-organisation-groups","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groups\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/memberIdFilter"},{"$ref":"#/components/parameters/groupKeyFilter"}],"summary":"List authorization group memberships in organisation","description":"Retrieves all authorization group memberships in an organisation.","operationId":"list-organisation-group-memberships","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'memberId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'groupKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships?memberId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&groupKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create authorization group membership in organisation","description":"Creates an authorization group membership in an organisation. The new group member must belong to that same organisation.","operationId":"create-organisation-group-membership","requestBody":{"description":"The group membership to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembershipCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"303":{"$ref":"#/components/responses/303-see-other-group-membership"},"403":{"$ref":"#/components/responses/403-default"},"422":{"description":"Unprocessable Content | - The group indicated by 'groupId' does not exist | -or- The object indicated by 'memberId' does not exist | -or- The group does not allow members of this type"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\"\n\n\tpayload := strings.NewReader(\"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"memberId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"groupKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"memberId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"groupKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({memberId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', groupKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/groupMemberships/{groupMembershipId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/groupMembershipId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get authorization group membership in organisation","description":"Retrieves the group membership with the specified ID.","operationId":"get-organisation-group-membership","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMembership"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete authorization group membership","description":"Deletes the group membership with the specified ID.","operationId":"delete-organisation-group-membership","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/groupMemberships/%7BgroupMembershipId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roles":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get roles","description":"Retrieves all the roles available in an organisation.","operationId":"list-roles","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roles\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments":{"parameters":[{"$ref":"#/components/parameters/organisationId"}],"get":{"tags":["Organisation Authorization Management"],"parameters":[{"$ref":"#/components/parameters/authorizationSubjectIdFilter"},{"$ref":"#/components/parameters/roleKeyFilter"}],"summary":"Get roles assignment for a participant attached to an organization","description":"Retrieves all authorization role assignments in an organisation.","operationId":"list-participant-role-assignments","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentListResult"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'subjectId' => 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75',\n  'roleKey' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments?subjectId=b76c02d2-f68f-4ab1-bb97-c75f357c2a75&roleKey=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"post":{"tags":["Organisation Authorization Management"],"summary":"Create role assignment in organisation","description":"Creates a role assignment in an organisation. The subject of the assignment must be a participant belonging to that same organisation.","operationId":"create-organisation-role-assignment","requestBody":{"description":"The role assignment to create.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignmentCreateRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\"\n\n\tpayload := strings.NewReader(\"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"subjectId\":\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\",\"roleKey\":\"string\"}');\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\npayload = \"{\\\"subjectId\\\":\\\"b76c02d2-f68f-4ab1-bb97-c75f357c2a75\\\",\\\"roleKey\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({subjectId: 'b76c02d2-f68f-4ab1-bb97-c75f357c2a75', roleKey: 'string'}));\nreq.end();"}]}},"/orchestrator/organisations/{organisationId}/authorization/roleAssignments/{roleAssignmentId}":{"parameters":[{"$ref":"#/components/parameters/organisationId"},{"$ref":"#/components/parameters/roleAssignmentId"}],"get":{"tags":["Organisation Authorization Management"],"summary":"Get role assignment","description":"Retrieves the role assignment with the specified ID.","operationId":"get-organisation-role-assignment","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAssignment"}}}},"400":{"$ref":"#/components/responses/400-default"},"401":{"$ref":"#/components/responses/401-default"},"403":{"$ref":"#/components/responses/403-default"},"404":{"$ref":"#/components/responses/404-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]},"delete":{"tags":["Organisation Authorization Management"],"summary":"Delete role assignment","description":"Deletes a role assignment in an organisation. The subject of that assignment will no longer be assigned that role in that organisation.","operationId":"delete-organisation-role-assignment","responses":{"200":{"$ref":"#/components/responses/200-default"},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/organisations/%7BorganisationId%7D/authorization/roleAssignments/%7BroleAssignmentId%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissions":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get organisations permissions","description":"Retrieves all the permissions available to organisations of the Data Exchange Platform.","operationId":"list-organisation-permissions","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionListResult"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}},"/orchestrator/authorization/organisations/permissionNavigation":{"get":{"tags":["Organisation Authorization Management"],"summary":"Get navigation hierarchy for organisations permissions","description":"Retrieves a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nThis organisation has no functional bearing and can change |\nClients should not take any hard-dependencies on the content of this hierarchy\n","operationId":"get-organisation-permission-navigation","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNavigationTree"}}}},"403":{"$ref":"#/components/responses/403-default"}},"x-codeSamples":[{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\")\n  .header(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api./%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.\",\n  \"port\": null,\n  \"path\": \"%7Bhostname%7D/orchestrator/authorization/organisations/permissionNavigation\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"}]}}},"components":{"securitySchemes":{"OAuth2":{"type":"oauth2","flows":{"clientCredentials":{"tokenUrl":"/api/auth/oauth2/token","scopes":{}}}}},"schemas":{"ObjectWithId":{"type":"object","description":"Partial schema for any object that has a property called 'id' that represents its unique ID","required":["id"],"properties":{"id":{"type":"string","description":"The unique ID of this object.","readOnly":true}}},"ConnectedDepDescriptions":{"type":"object","description":"Representing all descriptions associated to a connected DEP. Each description is referenced by the corresponding language iso code.","additionalProperties":{"type":"string"}},"ConnectedDepProperties":{"type":"object","description":"The mutable properties of a connected DEP.","properties":{"name":{"type":"string","description":"A human readable connected DEP name and allows a minimum of connector characters. Requires a minimum length of 1 character and allows a maximum length of 80 characters.","minLength":1,"maxLength":80},"descriptions":{"$ref":"#/components/schemas/ConnectedDepDescriptions"}}},"ConnectedDepReadOnlyProperties":{"type":"object","description":"The immutable properties of a connected DEP.","properties":{"createdAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was created"},"lastModifiedAt":{"type":"string","format":"date-time","description":"The UTC date and time when this connected DEP was last modified"}}},"RotationRole":{"type":"string","enum":["PRIMARY","SECONDARY"]},"RemoteServiceAccountCredentials":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}},"required":["clientId","clientSecret","rotationRole"]},"RemoteServiceAccount":{"type":"object","description":"Access and connection details about the remote connected DEP.","properties":{"apiEndpoint":{"type":"string","description":"API endpoint of the remote connected DEP"},"credentials":{"description":"List of credentials to access to the remote connected DEP","type":"array","items":{"$ref":"#/components/schemas/RemoteServiceAccountCredentials"}}},"required":["credentials"]},"ConnectedDep":{"type":"object","description":"Represents another Data Exchange Platform connected to this Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ConnectedDepProperties"},{"$ref":"#/components/schemas/ConnectedDepReadOnlyProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}],"required":["id","name","createdAt","lastModifiedAt","remoteServiceAccount"]},"ConnectedDepCreateRequest":{"type":"object","description":"Request used to create a new connected DEP.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"}],"required":["name"]},"Id":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"ConnectedDepPatch":{"type":"object","description":"A partial update of a connected DEP. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ConnectedDepProperties"},{"type":"object","properties":{"remoteServiceAccount":{"$ref":"#/components/schemas/RemoteServiceAccount"}}}]},"ObjectAssociatedWithAnotherDep":{"type":"object","description":"Partial schema for any object that is associated with or owned by another Data Exchange Platform","required":["depId"],"properties":{"depId":{"type":"string","description":"The ID of the Data Exchange Platform that owns this object.","readOnly":true}}},"HumanReadableObjectName":{"type":"string","description":"A human readable object name that starts with a letter and allows a minimum of connector characters.\nRequires a minimum length of 2 characters and allows a maximum length of 100 characters.\n","minLength":2,"maxLength":100,"pattern":"^(?:\\p{L}[\\p{L}\\p{Mn}\\p{Nd}\\u2019\\-._,' \\(\\)]{1,99})$","example":"Sample name"},"ServiceAccountProperties":{"type":"object","description":"The properties of a service account.","properties":{"name":{"description":"The name of the service account.","$ref":"#/components/schemas/HumanReadableObjectName"},"description":{"type":"string","description":"A short description of this service account.","maxLength":500}}},"ServiceAccountReadOnlyProperties":{"type":"object","description":"The properties of a service account.","properties":{"active":{"type":"boolean","description":"Indicates whether the service account is active.","readOnly":true}}},"BasicAuditInfo":{"type":"object","description":"Encapsulates basic audit information about this resource","properties":{"createdAtUtc":{"type":"string","format":"date-time","description":"(Optional) The UTC time when this resource was created, if known.","readOnly":true},"createdById":{"type":"string","description":"(Optional) The identifier of the actor who created this resource, if known.","readOnly":true},"lastModifiedAtUtc":{"type":"string","format":"date-time","description":"(Optional) The time in UTC when this resource was last modified, if known.","readOnly":true},"lastModifiedById":{"type":"string","description":"(Optional) The identifier of the actor who last modified this resource, if known.","readOnly":true}}},"DepServiceAccount":{"type":"object","description":"A service account that may be allowed to access this Data Exchange Platform on behalf of another Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectAssociatedWithAnotherDep"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","depId","name","active"]},"ServiceAccountPatch":{"type":"object","description":"A partial update of a service account. Only properties that are specified and non-null will be updated.","allOf":[{"$ref":"#/components/schemas/ServiceAccountProperties"}]},"OAuth2ClientCredentials":{"type":"object","description":"Credentials to use with the OAuth2 client_credentials grant. Includes the client_id, but not the client_secret.\nThe client_secret can be obtained separately.\n","properties":{"clientId":{"type":"string","description":"The client_id in the OAuth2 client_credentials grant type."},"lastRotatedUtc":{"type":"string","format":"date-time","description":"The time in UTC that the client_secret was last rotates."},"rotationRole":{"$ref":"#/components/schemas/RotationRole"}}},"OAuth2ClientSecret":{"type":"object","description":"The client_secret tu use with the OAuth2 client_credentials grant.\n","properties":{"clientSecret":{"type":"string","description":"The client_secret in the OAuth2 client_credentials grant type."}}},"OrchestrationServiceAccount":{"type":"object","description":"A service account that may be allowed to perform operations on the Data Exchange Platform on behalf of an organisation.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ServiceAccountProperties"},{"$ref":"#/components/schemas/ServiceAccountReadOnlyProperties"},{"$ref":"#/components/schemas/BasicAuditInfo"}],"required":["id","name","active"]},"ObjectWithKey":{"type":"object","description":"Partial schema for any object that has a property called 'key' that represents its unique key within a given scope","properties":{"key":{"type":"string","description":"The unique KEY of this object in a known scope.","readOnly":true}}},"SecurityTier":{"type":"integer","description":"The security tier to which a permission, role or group belongs. The lower the number, the more critical the security tier. An role cannot contain a permission with a more critical security tier than its own. An group cannot be assigned a role with a more critical security tier than its own.","minimum":0,"maximum":2},"ObjectWithSecurityTier":{"type":"object","description":"Partial schema for any object that has a property called 'securityTier' that represents its security tier","properties":{"securityTier":{"$ref":"#/components/schemas/SecurityTier"}}},"Permission":{"type":"object","description":"A permission on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectWithSecurityTier"}],"required":["key","securityTier"]},"PermissionListResult":{"type":"object","description":"Encapsulates a list permissions in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"required":["items"]},"PermissionNavigationNode":{"type":"object","description":"May contain a logical grouping of permissions and other child nodes.","properties":{"key":{"description":"The key or label of this node","type":"string"},"children":{"description":"Child nodes in the navigation hierarchy","type":"array","items":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"permissionKeys":{"description":"The keys of the permission at this node of the navigation hierarchy","type":"array","items":{"type":"string"}}}},"PermissionNavigationTree":{"type":"object","description":"Represents a logical organisation of the permissions on the Data Exchange Platform in the form of a tree of labelled nodes |\nin which each node may or may not contain permissions and the same permission may be contained by multiple nodes.\n","properties":{"root":{"$ref":"#/components/schemas/PermissionNavigationNode"}},"required":["root"]},"Key":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"RoleProperties":{"type":"object","description":"The properties of a role on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"minimumAssignmentCount":{"type":"integer","description":"A minimum number of subjects to which this role must be assigned at any given time. | Use this mechanism to guarantee a level of redundancy in the assignment of mission-critical roles. | Note that whether the subject of a role assignment is active or inactive/deactivated | is transparent. Role assignments are NOT deleted automatically when their subject is deactivated, | contrary to when their subject is deleted."},"description":{"type":"string","maxLength":500,"description":"The description of the role."},"builtInRole":{"type":"boolean","description":"Indicates whether the role is built-into the Data Exchange Platform, or otherwise is a custom role."},"assignableSubjectTypes":{"type":"array","description":"The types of subjects to which it is allowed to assign this role.","items":{"type":"string"}},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}}}]},"OrchestratorRole":{"type":"object","description":"An orchestrator role on the Data Exchange Platform that can be assigned to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","permissions","assignableSubjectTypes","securityTier","builtInRole","readOnly"]},"OrchestratorRoleListResult":{"type":"object","description":"Encapsulates a list of orchestrator role objects in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRole"}}},"required":["items"]},"RoleCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role.","properties":{"key":{"description":"The unique key by which the new role will be referenced if successfully created. (Optional) If none is provided, the server will generate one.","$ref":"#/components/schemas/Key"},"name":{"description":"The name of the role.","$ref":"#/components/schemas/HumanReadableObjectName"},"securityTier":{"description":"The security tier of this role.","$ref":"#/components/schemas/SecurityTier"},"description":{"type":"string","maxLength":500,"description":"The description of the role. (Optional)"},"permissions":{"type":"array","description":"The permissions included in this role, referenced by their keys.","items":{"$ref":"#/components/schemas/Key"}}},"required":["name","securityTier"]},"OrchestrationSubjectType":{"type":"string","enum":["ORCHESTRATOR","SERVICE_ACCOUNT","GROUP"]},"OrchestratorRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrchestrationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"RoleAssignmentProperties":{"type":"object","description":"The properties of a role assignment on the Data Exchange Platform.","properties":{"subjectId":{"description":"The ID of the subject to which the role is assigned","$ref":"#/components/schemas/Id"},"roleKey":{"description":"The unique key of the role assigned.","$ref":"#/components/schemas/Key"}}},"OrchestratorRoleAssignment":{"type":"object","description":"Represents the assignment of an orchestrator role to a subject, |\nthus awarding that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","subjectId","roleKey"]},"OrchestratorRoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of orchestrator role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrchestratorRoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequestProperties":{"type":"object","description":"The properties necessary to create a new role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["subjectId","roleKey"]},"OrchestratorRoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a new orchestrator role assignment.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]},"OrganisationGlobalRole":{"type":"object","description":"A role that is available to all organisations on the Data Exchange Platform |\nand can be assigned to subjects in any of those organisations |\nbut which is not owned by any singular organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/RoleProperties"},{"properties":{"readOnly":{"type":"boolean","description":"Indicates whether this role can be modified by the orchestrator of the Data Exchange Platform."}}}],"required":["key","name","assignableSubjectTypes","permissions","securityTier","readOnly"]},"OrganisationGlobalRoleListResult":{"type":"object","description":"Encapsulates a list of organisation global roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationGlobalRole"}}},"required":["items"]},"OrganisationSubjectType":{"type":"string","enum":["USER","SERVICE_ACCOUNT","GROUP"]},"OrganisationGlobalRoleCreateRequest":{"type":"object","description":"The properties necessary to create a new organisation global role.","allOf":[{"$ref":"#/components/schemas/RoleCreateRequestProperties"},{"properties":{"assignableSubjectTypes":{"type":"array","items":{"$ref":"#/components/schemas/OrganisationSubjectType"},"minItems":1,"maxItems":1}}}],"required":["name","securityTier","assignableSubjectTypes"]},"ObjectBelongingToOrganisation":{"type":"object","description":"Partial schema for any object that is associated with or owned by an organisation on the Data Exchange Platform","required":["organisationId"],"properties":{"organisationId":{"type":"string","description":"The ID of the organisation that owns this object.","readOnly":true}}},"GroupProperties":{"type":"object","description":"The properties of an authorization group of any kind on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithSecurityTier"},{"properties":{"name":{"type":"string","description":"The name of the authorization group."},"description":{"type":"string","maxLength":500,"description":"The description of the authorization group."},"builtInGroup":{"type":"boolean","description":"Indicates whether the group is built-in on the Data Exchange Platform, or otherwise is a custom group."},"allowedMemberTypes":{"type":"array","description":"The types of subjects which are allowed to become members of the authorization group.","items":{"type":"string"}}}}]},"Group":{"type":"object","description":"An authorization group belonging to an organisation on the Data Exchange Platform","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupProperties"}],"required":["key","organisationId","name","securityTier","allowedMemberTypes","builtInGroup"]},"GroupListResult":{"type":"object","description":"Encapsulates a list of authorization groups in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}},"required":["items"]},"GroupMembershipProperties":{"type":"object","description":"Properties of a membership in an authorization group of any kind on the Data Exchange Platform.","properties":{"memberId":{"description":"The ID of the subject which is made a member of a group via this membership.","$ref":"#/components/schemas/Id"},"groupKey":{"description":"The unique key of the group in which the subject is made a member.","$ref":"#/components/schemas/Key"}}},"GroupMembership":{"type":"object","description":"A membership of a subject in authorization group belonging to an organisation on the Data Exchange Platform.","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["id","organisationId","memberId","groupKey"]},"GroupMembershipListResult":{"type":"object","description":"Encapsulates a list of authorization group memberships in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/GroupMembership"}}},"required":["items"]},"GroupMembershipCreateRequestProperties":{"type":"object","description":"Properties necessary to create an authorization group membership of any kind.","allOf":[{"$ref":"#/components/schemas/GroupMembershipProperties"}],"required":["memberId","groupKey"]},"GroupMembershipCreateRequest":{"type":"object","description":"The properties necessary to create an authorization group membership in an organisation.","allOf":[{"$ref":"#/components/schemas/GroupMembershipCreateRequestProperties"}],"required":["memberId","groupKey"]},"Role":{"type":"object","description":"A role that can be assigned to a subject in order to |\ngrant that subject all the permissions associated with the role.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithKey"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleProperties"}],"required":["organisationId","key","name","assignableSubjectTypes","permissions","securityTier","builtInRole"]},"RoleListResult":{"type":"object","description":"Encapsulates a list of roles in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}},"required":["items"]},"RoleAssignment":{"type":"object","description":"Represents the assignment of a role to a subject, |\nthus granting that subject all the permissions associated with the role in the organisation.\n","allOf":[{"$ref":"#/components/schemas/ObjectWithId"},{"$ref":"#/components/schemas/ObjectBelongingToOrganisation"},{"$ref":"#/components/schemas/RoleAssignmentProperties"}],"required":["id","organisationId","subjectId","roleKey"]},"RoleAssignmentListResult":{"type":"object","description":"Encapsulates a list of role assignments in response to a query or list request","properties":{"items":{"type":"array","items":{"$ref":"#/components/schemas/RoleAssignment"}}},"required":["items"]},"RoleAssignmentCreateRequest":{"type":"object","description":"The properties necessary to create a role assignment in an organisation.","allOf":[{"$ref":"#/components/schemas/RoleAssignmentCreateRequestProperties"}],"required":["subjectId","roleKey"]}},"responses":{"400-default":{"description":"Bad request. The request is malformed or contains invalid parameters in the body, URL path, URL query string, or HTTP headers.\n"},"401-default":{"description":"Unauthorized. The caller's authentication credentials are invalid or missing.\n"},"403-default":{"description":"Forbidden. The caller is not allowed to perform this operation.\n"},"404-default":{"description":"Not Found. The specified resource was not found.\n"},"200-default":{"description":"OK"},"204-default":{"description":"No content"},"409-default":{"description":"Conflict. An equivalent resource already exists.\n"},"422-default":{"description":"Unprocessable content. The request is well-formed but violates the semantics or business logic of the server.\n"},"303-see-other-role-assignment":{"description":"See Other | The resource was not created. An equivalent assignment for the same subject and role already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent role assignment resource to the one that was POST-ed"}}},"303-see-other-group-membership":{"description":"See Other | An equivalent membership for the same member in the same group already exists. | Use the value of the Location response header to find it.","headers":{"Location":{"schema":{"type":"string"},"description":"The location of an equivalent authorization group membership resource to the one that was POST-ed"}}}},"parameters":{"depId":{"name":"depId","description":"The ID of a registered Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"serviceAccountId":{"name":"serviceAccountId","description":"The ID of a service account.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"rotationRole":{"name":"rotationRole","description":"Indicates one of the two client credentials for this service.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/RotationRole"}},"roleKey":{"name":"roleKey","description":"The unique key of a role.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Key"}},"authorizationSubjectIdFilter":{"name":"subjectId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is assigned a role for authorization on the Data Exchange Platform."},"roleKeyFilter":{"name":"roleKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of a role on the Data Exchange Platform. Only results satisfying this filter condition should be returned."},"roleAssignmentId":{"name":"roleAssignmentId","description":"The ID of an role assignment.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"organisationId":{"name":"organisationId","description":"The ID of an organisation registered on the Data Exchange Platform","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}},"memberIdFilter":{"name":"memberId","in":"query","required":false,"schema":{"type":"string","description":"The unique ID of an object on the Data Exchange Platform.\nIDs are generated server-side and should be treated as opaque strings by clients.\n","pattern":"^[-_0-9a-zA-Z]+$","minLength":1,"maxLength":36,"example":"b76c02d2-f68f-4ab1-bb97-c75f357c2a75"},"description":"The ID of a subject that is a member in a authorization group."},"groupKeyFilter":{"name":"groupKey","in":"query","required":false,"schema":{"type":"string","description":"The unique key of an object on the Data Exchange Platform.\nKeys may be generated server-side but also derived from user input or chosen directly by the user.\n","minLength":1,"maxLength":75,"pattern":"^[-_0-9a-zA-Z]+$"},"description":"The unique key of an authorization group. Only results satisfying this filter condition should be returned."},"groupMembershipId":{"name":"groupMembershipId","description":"The ID of an authorization group membership.","in":"path","required":true,"schema":{"$ref":"#/components/schemas/Id"}}}}}
